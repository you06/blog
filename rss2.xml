<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Freezing</title>
    <link>https://blog.tongmu.me/</link>
    
    <image>
      <url>https://blog.tongmu.me/icon/icon.png</url>
      <title>Freezing</title>
      <link>https://blog.tongmu.me/</link>
    </image>
    
    <atom:link href="https://blog.tongmu.me/rss2.xml" rel="self" type="application/rss+xml"/>
    <atom:link href="https://blog.tongmu.me/" rel="hub"/>
    <description>you06&#39;s blog &amp; everything</description>
    <pubDate>Mon, 24 May 2021 10:30:52 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>风景摄影-2021-05</title>
      <link>https://blog.tongmu.me/2021/05/11/photography-2021-05/</link>
      <guid>https://blog.tongmu.me/2021/05/11/photography-2021-05/</guid>
      <pubDate>Tue, 11 May 2021 22:05:53 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近的一些作品，我想相比之前应该有些进步了。</p><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-05/DSC00825-826-50.jpg"></p><p>这张照片不是用广角镜头拍的，是由两张照片合成而来，下面是原图。</p><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-05/DSC00825%2B826.jpg"></p><p>我觉得对于城墙这种雄伟的建筑，一个视角能表达的画幅有限，所以进行了一些尝试，结果达到了我的预期，并且一开始把合成后的图发送给同玩摄影的朋友的时候，他也没有一眼看出异样。</p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-05/DSC00945.jpg"></p><p>非特写静物是我最不会拍的东西，挑了好久修了这一张。</p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-05/DSC00946.jpg"></p><p>这张图是重修的，意图表达一些年代感。</p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-05/DSC00949.jpg"></p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-05/DSC01042.jpg"></p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-05/DSC01125.jpg"></p><p>果然夕阳时候的光影最适合拍摄，这张是直出，无修。</p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-05/DSC01134.jpg"></p><p>这张也是夕阳时刻的照片，不过在调色上费了些神。</p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.tongmu.me/2021/05/11/photography-2021-05/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>初めてのTiDB</title>
      <link>https://blog.tongmu.me/2021/04/12/hajimete-no-tidb/</link>
      <guid>https://blog.tongmu.me/2021/04/12/hajimete-no-tidb/</guid>
      <pubDate>Mon, 12 Apr 2021 16:30:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>このブログは僕自身の観点から、PingCAPのオフィシャルのドキュメントではありません。</p><p>TiDBエンジニアです。今回、TiDB初めての使用することについてが話します。</p><h2 id="クラスターを展開する"><a href="#クラスターを展開する" class="headerlink" title="クラスターを展開する"></a>クラスターを展開する</h2><p><a href="https://github.com/pingcap/tiup/">TiUP</a>で一番小さいのクラスターを展開することはおすすめ。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~ » curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh # TiUPをインストールする</span><br><span class="line">~ » tiup playground --monitor=false --tiflash=0 # クラスターを展開する</span><br><span class="line">Starting component `playground`: /home/you06/.tiup/components/playground/v1.4.1/tiup-playground --monitor=false --tiflash=0 v4.0.12</span><br><span class="line">Playground Bootstrapping...</span><br><span class="line">Start pd instance</span><br><span class="line">Start tikv instance</span><br><span class="line">Start tidb instance</span><br><span class="line">Waiting for tidb instances ready</span><br><span class="line">127.0.0.1:4000 ... Done</span><br><span class="line">CLUSTER START SUCCESSFULLY, Enjoy it ^-^</span><br></pre></td></tr></table></figure><p>そして、他のターミナルを開きて、MySQLクライアントでクラスターに接続しましょう。それから、MySQL同じに使うことができまて、試してみてください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~ » mysql --host 127.0.0.1 -P4000 -u root</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 4</span><br><span class="line">Server version: 5.7.25-TiDB-v4.0.12 TiDB Server (Apache License 2.0) Community Edition, MySQL 5.7 compatible</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h2 id="ノードの種類"><a href="#ノードの種類" class="headerlink" title="ノードの種類"></a>ノードの種類</h2><p>クラスターの中で複数のノードはあって、TiDBやPDやTiKVやTiFlashやなど。詳しい情報を知っていることは必要ではない。</p><ul><li>TiDBは計算することを担任して、実際にデータを保有することではありません。その中でオプティマイザーとトランザクションの一部があります。</li><li>PDはターム分配することを担任して、メタデータを保有することができました。</li><li>TiKVはデータの保存するノードで、トランザクションの一部とRaftに基づくのMVCCはあります。高い可用性で、分散トランザクションをサポートするのKVデータベースです。</li><li>TiFlashは<a href="https://ja.wikipedia.org/wiki/OLAP">OLAP</a>分析しているクエリを専用するのエンジンです。TiDBと同じデータを使用することができて、データを同期は必要がありません。</li></ul><h2 id="トランザクション"><a href="#トランザクション" class="headerlink" title="トランザクション"></a>トランザクション</h2><p>トランザクションはデータベースの基本的な正しさの保証です。TiDBは二つのトランザクションのモードをサポートして、楽観トランザクションと悲観トランザクションです。その中で、悲観トランザクションはデフォルトで、<code>tidb_txn_mode</code>でセットすることができます。</p><ul><li>楽観トランザクションで複雑なトランザクションが同一のキーを書くことは許します。お先にコミットするのトランザクションが成功できて、他のトランザクションは失敗します。低い競合の場合は楽観モードが適切です。</li><li>悲観トランザクションでトランザクションがの実施中はロックを書きますから、コミットは成功することが保証することができます。高い競合の場合は楽観モードが適切です。</li></ul><p>先ずは悲観モードを試してみてましょう。テーブルを作った後で、二つのトランザクションをまとめて行って、同じデータを処理しました。画像のなかで、二番目のトランザクションはブロックしました。結果は二つのトランザクションを成功して、順番は左の次に右の。</p><p><img src="demo-pessimistic-txn.png" alt="Pessimistic Txn Demo"></p><p>それで楽観モードを試します。<code>tidb_txn_mode</code>でモードをスイッチして、二つのトランザクションは同じプライマリーキーのデータを作成しました。結果は最初のトランザクションを成功して、他のトランザクションは失敗しました。それは「first commit wins」ルールです。</p><p><img src="demo-optimistic-txn.png" alt="Optimistic Txn Demo"></p><h2 id="プロダクションの注意事項"><a href="#プロダクションの注意事項" class="headerlink" title="プロダクションの注意事項"></a>プロダクションの注意事項</h2><p>TiUPの<code>playground</code>コマンドはテスト用だけて、データの可用性と安全は保障することはない。</p><p>もし、自分でクラスターを操作したなら、TiUPの<code>cluster</code>を使ってください。もしクラウドでTiDB使ってほしいかった、Operatorで展開するおよび<a href="https://en.pingcap.com/products/tidbcloud/">TiDBクラウド</a>を使うことができます。</p><h2 id="他の質問"><a href="#他の質問" class="headerlink" title="他の質問"></a>他の質問</h2><p>もし他の質問があるなら、僕にメートルおよびメッセージを送りましょう。</p><ul><li>メートル：tongmu#pingcap.com</li><li>ツイッター：<a href="https://twitter.com/you06v">you06v</a></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://blog.tongmu.me/tags/%E6%97%A5%E8%AF%AD/">日语</category>
      
      <category domain="https://blog.tongmu.me/tags/TiDB/">TiDB</category>
      
      
      <comments>https://blog.tongmu.me/2021/04/12/hajimete-no-tidb/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>学日语要花费多少心思（三）</title>
      <link>https://blog.tongmu.me/2021/04/11/learning-japanese-3/</link>
      <guid>https://blog.tongmu.me/2021/04/11/learning-japanese-3/</guid>
      <pubDate>Sun, 11 Apr 2021 22:21:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天想说一说日语的复杂性，我猜测它来源于中文，这一复杂性能够在微调语句时感受到——想象你需要给上级解释一件难以开口的事情时准备措辞的感觉。这类语言困难点在于有许多正确的说法，因此日文里称作文法的部分中所含有的条目非常多。</p><table><thead><tr><th>尊敬程度</th><th>语句</th></tr></thead><tbody><tr><td>非敬语</td><td>分かった。</td></tr><tr><td>⭐</td><td>分かりました。</td></tr><tr><td>⭐⭐</td><td>畏まりました。</td></tr><tr><td>⭐⭐⭐</td><td>承知いたしました。</td></tr></tbody></table><p>以「我知道了」这句话举例，可以延伸出多种说法。「分かった」是日语的简体说法，只能用于朋友间交流，而「分かりました」是丁宁体，是比较正式的说法，可以用于对老师、上级。「畏まりました」则多用于服务行业，「承知いたしました」则要更加正式。一句话根据句型的不同和用的动词不同，则会演变出多种情况。</p><table><thead><tr><th>尊敬程度</th><th>语句</th></tr></thead><tbody><tr><td>非敬语</td><td>行きましょう。</td></tr><tr><td>⭐</td><td>行きましょうか。</td></tr><tr><td>⭐⭐</td><td>行きませんか。</td></tr><tr><td>⭐⭐⭐</td><td>行かないでしょうか。</td></tr></tbody></table><p>同样，邀请人也有尊敬程度的区别，「行きましょうか」给了人拒绝的选项，而「行きましょう」没有，「行きませんか」通过否定的形式邀请对方显得更加客气。「行かないでしょうか」通过否定的形式和「でしょうか」的组合进行提问，是最客气的说法。</p><p>标日是从丁寧形开始教起的，但是日本国语课程则是从普通形开始，要谨慎对待这一区别，不然学完之后容易“不说人话”。</p><p>再者，用中文来类比或是通过翻译到中文来理解某些语句的内涵是很困难的，例如「大丈夫」这个词，直接翻译是「没关系」，有时是婉拒对方的好意，有时是答应对方的请求并表示不麻烦。而同样的语义下，使用「ちょっと」时，婉拒好意的意义不发生改变，在被请求时则表示不大方便，不能提供帮助。</p><p>说解决这些复杂问题的方法的话也只能是见多识广了，反复的学习语法，多看剧，根据场景对话来理解某句话想要表达的含义。</p>]]></content:encoded>
      
      
      
      <category domain="https://blog.tongmu.me/tags/%E6%97%A5%E8%AF%AD/">日语</category>
      
      
      <comments>https://blog.tongmu.me/2021/04/11/learning-japanese-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>学日语要花费多少心思（二）</title>
      <link>https://blog.tongmu.me/2021/04/07/learning-japanese-2/</link>
      <guid>https://blog.tongmu.me/2021/04/07/learning-japanese-2/</guid>
      <pubDate>Wed, 07 Apr 2021 01:47:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我从学校的图书馆借了一本太宰治的小说集，包括『斜陽』、『人間失格』、『惜別』，其实本来是想借三島由紀夫的书的，但学校的图书馆里这类原文读物实在匮乏，挑选空间不大。一是想读『斜陽』，二是想要借此锻炼一下阅读能力。读了不到十页就发现看不懂，于是又去借了本中文版的，准备对照着读。关于通过小说进行日语学习的效果，日后再更。</p><p>因为一些学位上的事比较疲惫，所以今天没有正经的进行学习，选择看了看动画，复习了 <a href="https://www.bilibili.com/video/BV1At411p7Cg">10 感谢祭</a>。</p><p>看动画的过程中，如果不开中文字幕，并且尝试去听懂每一句话，也是有不少帮助的。但会导致频繁的停下来，根据听到的声音去查字典，重度影响观看体验；但如果打开了中文字幕，大脑会不可控制的去看中文，两难的选择。</p><p>发现很多之前只是听个声音或者关键词的歌词，已经能够简单的分析语法了，虽然离熟悉还差得远，但歌词里确实是有很多初学中不会碰到的单词。我确信这种学习是有效的，因为有时在课上造句的时候，会想起在这种奇妙的地方一闪而过的单词，一次可能记不下来，但是五次十次之后，有的词汇就能够被使用起来了。</p><p>插入一个题外话，能够看懂歌词之后，发现这些 P 主对于感情的把握非常细致，虽然通过小动作来传达细微的感情不是什么新颖的手法，但这一手法的高明程度却相去甚远，10 感谢祭中的抒情类歌曲在这一方面没有不表现出令我惊叹的。</p>]]></content:encoded>
      
      
      
      <category domain="https://blog.tongmu.me/tags/%E6%97%A5%E8%AF%AD/">日语</category>
      
      
      <comments>https://blog.tongmu.me/2021/04/07/learning-japanese-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>学日语要花费多少心思（一）</title>
      <link>https://blog.tongmu.me/2021/04/04/learning-japanese-1/</link>
      <guid>https://blog.tongmu.me/2021/04/04/learning-japanese-1/</guid>
      <pubDate>Sun, 04 Apr 2021 22:55:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这篇文章开始于我学习日语的初级阶段，目的是为了记录学习这门语言所做的努力，所需要花费的精力和时间，学习的方法和方向。</p><p>我并不是零基础开始的，在开始系统学习前，我就已经能够阅读生肉游戏。记得第一本生肉时，我怀着热情和对游戏的热爱，但最后以弃坑告终。我第一本成功阅读的生肉大概是「千の刃濤、桃花染の皇姫」，主角语音对于初心者的帮助非常大。</p><p>考研前夕，我曾找过一位日语学校的老师，聊了关于日本留学、日语学习等方向的内容，当然最后我选择了考研并且上岸，但她层多次强调，初级日语需要和老师一起学习，中级、高级的内容可以自己去学，当时因为学习重心也不在这点上，遂拒绝。直到研究生毕业前夕，暂时将实习的工作告一段落，又惦记起来日语学习的事。我再次找上了那位老师，并且和同级毕业的同学一起参加了初级课程。给我们上课的老师是日语文学系的学生，除了书本上的单词和语法之外，还告诉了我们很多奇怪的知识，比如在月份学习中，告诉了我们从「睦月」到「師走」的传统读法，这很有趣。</p><p>此前，我曾想通过 TiDB 的文档翻译工作，来帮助自己学习，后来发现这项工作的推进过于痛苦，在一篇文档的翻译过程中，我需要大量的判断机翻的结果是否合理、查询同类日文资料的表述方式、对专有名词做调研。这对于我一个尚未熟悉日文语法、基础单词掌握不全的人来说实在是过于艰苦了，通常翻译一篇一两千字的文档可能会耗费我一个周末的时间。也是因此，当时 mentor 提出我可以每周用一个工作日来做这项文档的翻译工作时，虽然很心动，但我觉得不能胜任。</p><p>在写这篇文章时，我的学习进度差不多在标日初级 20 课，在这个过程中，常年的积累让我对语法、例子的理解变得容易，但顺着上课的思路和老师的补充，理顺了不少此前很混乱的语法。倒不如说，此前的学习方式是接近母语的方式，但是我并没有生存在一个日语交流的环境中，仅靠着影视作品和游戏的输入量，想要通过这种方式掌握一门语言还是过于 naive 了。</p><p>我相信在学习一门语言时，应当抛去很多已有的对语言的成见，虽然把一句话用对应的中文或英文讲出来会让人容易理解不少，但也有很多用法是无法被语法所简单描述的，也无法用中文或英文十分准确的表达其含义。例如「僕は童です」、「僕が童です」，这两句话翻译到中文都是「我是童先生」，但他们在日语环境中有着不同；又如，我们需要说「ことがあります」、「ことはありません」，前句表示「做过」，后句表示「没做过」，但他们就是需要使用「が」和「は」这两个不同的连接语，这种是不能通过翻译来理解的，这种现象在中文中也有，是我们习以为常的说话方式决定了什么样的语言是正确的，语法是为了描述这一正确性而存在的，而非我们在根据语法说话。</p><p>在日语中，同样的语法经常有书面语和口语两种形式，这种区别可能被本地人所忽视，就如我在写这篇文章的时候，会注意自己需要多使用书面语，在写论文时则会更加正式些。日文中有个术语叫缩约表现，就是用来描述一些语法形式在口语时的缩短形式，比如我们说「コーラじゃだめです」是口语中说「可乐是不行的」，对应的书面语为「コーラではだめです」，这一点在系统学习前被我所忽略，是一味模仿的缺陷。语言有省略的特性，我们在说中文时就经常省略，日语也有，可能不尽相同，例如「頑張れないと」其实省略了后面的「頑張れないと（いけますか）」，这也是口语和书面语的区别之一。</p><p>缩约、省略都需要通过日常的积累进行理解，不能说不系统的、通过动画、游戏进行学习就是毫无效果的，这种学习亦能带来重要的语感。很多中国人花费了大量时间和经历在教科书上学习英语，最后发现自己所说的英语和英语母语人说的很不一样，写出来的东西也不像是能够给人看的，又花大量时间去让自己的英语适应母语者的环境，我和一位同事在口语交流时因为他的说话风格和口音，遇到了莫大的障碍，还好他愿意不厌其烦的复述。</p><p>繁多的初级语法能够帮助理清单词（动词、名词、形容词）变化，写出基本的句子，但也需要大量的记忆和练习，这是非母语者为了追上母语者所拥有的语感的代价。因此我在课外恶补这方面的语法知识，而短期内大量知识的消化，能够带来对语言整体的感觉。</p><p>学语言需要强大的动力，包括我在内的大部分人学英语是因为学业需要（当然现在不是了），我学日语的动力在于想去日本工作。读书期间没能走出去，如果能够自力更生之后还不尝试往外走的话，那太对不起自己了。当我写下这篇文章时，举例今年的 N1 考试只有三个月整了，应该，能过的吧。</p>]]></content:encoded>
      
      
      
      <category domain="https://blog.tongmu.me/tags/%E6%97%A5%E8%AF%AD/">日语</category>
      
      
      <comments>https://blog.tongmu.me/2021/04/04/learning-japanese-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Review「9-nine」</title>
      <link>https://blog.tongmu.me/2021/03/30/review-9-nine/</link>
      <guid>https://blog.tongmu.me/2021/03/30/review-9-nine/</guid>
      <pubDate>Tue, 30 Mar 2021 00:46:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本作是分(pian)割(qian)商(da)法(fa)的集大成者，虽然很不愿意承认，这部作品确实是近年来最火的 galgame 之一了。本来由于个人对分割商法的反感以及不是特别吃和泉脸外加对剧情没有很强的信心，一直没有开坑，然而全四部都推出之后其质量意外的还可以（评价来自某些大手玩家），正好在 steam 上看到上架了，所以决定趁着春节打一打。</p><p>最初玩和泉つばす老师的作品是 feng 社的「あかね色に染まる坂」，之后的「ましろ色シンフォニー」和「恋がさくころ桜どき」都摸过一部分，因为剧情上实在提不起兴致，这几作都只是挑了想玩的线玩玩，而本次的 999 系列也属于稳定发挥。</p><p>首先提示一下，steam 版的汉化质量一言难尽，错译、错轴（当前的汉化翻译对应前一句原文）、某些名词翻译的前后不一均有出现，有能力的朋友请尽量开启原文，可以使用日 + 中双字幕的模式。</p><p>先说分割商法，本作有四个可攻略角色，剧情是章节式的层层递进，所以顺理成章地分成了四部分进行售卖，每作不含税 2,800 円的售价，总计 11,200 円还是挺正常的价位。然而本着特典才是本体的心态，某些店铺的店限价格超过 15,000 円，总计就直接 60,000 円往上走了，怕了怕了。更可怕的是，在最后一作，调色板考虑到玩家们买了四个游戏，归纳收集的需求，推出了 storage box，说人话就是 1,000 円买一个盒子。综上，如果想要购买本系列作品，steam 是不错的选择。</p><p>抛开分割商法，章节式的剧本形式也不是新鲜玩法了，分四作进行销售，一是为了资金回笼更加平滑，二是可以更好的打磨各角色的特性。喜欢玩章节式的八月，就经常出现部分角色后期严重打酱油的现象，尤其是首位可攻略角色，因为处于剧情展开的关键期，角色刻画很容易被剧情本身所掩盖。<strong>但是啊</strong>，我对 999 系列的第一作「9-nine-九次九日九重色」中九條都的剧情，很不满意！作为第一作，要介绍世界观、推进主要剧情，这需要花费大量的笔墨是没错，但是因此怠慢了角色的刻画，绝对是因小失大，相比后面几作，第一作的整体时间甚至更加短。</p><details><summary>以下剧透</summary><p>第一作通过时间倒退的方式让玩家在某些剧情关键点加入选项的玩法，其实不错，但这样的操作导致一周目和二周目有大量的重复。换句话说，其实是调色板偷懒了，本来应该是崭新的二周目，重点刻画九條都这个角色的二周目，调色板直接使用了几乎所有一周目的素材来填充？？？我替九條都感到不值。</p></details><p>在开坑以前，游戏封面带给我的感觉是这是一部很神秘的作品。场景的反差很容易给这类奇幻风的游戏带来正面冲突，在气氛渲染上，我觉得这系列作品都做的很一般，把环境设定为校园生活，却没能够在关键场景突破这些环境设定，有点废萌的味道了。考虑到かずきふみ是剧本新人，期待一下未来的表现。章节式的游戏随着剧情递进进行场景切换是很自然的事，然而本作就是这一套场景用到底，这点我不大满意。房间里的夜晚画面相当粗糙，仅仅是调暗了明度，连影子都还在，这就相对敷衍了一些。封面绘的灵动在游戏里没有得到体现，我甚至觉得在看了封面没玩游戏的时候还有着更多的想象空间。</p><p>华哥的参演绝对是这作最大的成功点之一，就像丸户评价米泽円配音小木曾雪菜，我认为华哥配音的新海天做到了真正的完美。新海天是个吐槽系角色，在吐槽的同时保持亲近感，华哥在这个角色上做到的收放自如令我震惊，倒不如说，以前听华哥配音的其他角色时，总感觉有压抑的地方，亲和感无法完全体现，新海天就像是为华哥量身订制的。我不遗余力的吹捧华哥的演出，一方面是因为极具趣味性，尤其是“蛤？…粗口… 蛤？”的句式，换一位声优可能角色就要崩了；另一方面，这作剧情的本体看点不足，在玩第二作的时候，比起剧情本身，我更专注于其中的段子。Episode 2 的剧情质量相比 Episode 1 有不少提升，然而关键选项依旧很敷衍。某位大佬提到于新海天这个角色，有一个很大的失败点，是她和青梅竹马没有什么区别，提到妹妹和青梅竹马，我想到的是「ヨスガノソラ」这部作品，在两条路线里，虽然在最后都得到了对方的理解，但与主角的距离、关心的点、是否会生闷气等因素表明了妹妹和青梅的巨大区别。</p><p>Episode 3 是相当王道的学姐线，所以不再过多的说人设。这一作结合剧情的程度比 Episode 1 要好得多，虽然也推进了很多主线进度，但其中穿插的个人线事件使得学姐这个角色并不那么单薄。学姐线的感情变化非常直白，一个客服异性恐惧症的过程，其中穿插的点到为止的霸凌情节不让人觉得反感，最后学姐全力展开能力的演出效果我是比较满意的。这作的完整度尚可，而剧情上也承前启后，人格切换的设定也算比较温暖，有点接近废萌了。</p><p>— 几个月过去了 —</p><p>Episode 4 终于上 steam 了，前三部还出了组合包加打折，可以入手了。</p><p>Episode 4 据说是升华章，首先感觉 OP 不错，风格多变却不违和，大胆的颜色使用，可惜没体现出本作标题「雪」的感觉。打完这部作品的我，感觉雪只是和主角結城同音，这样的取名方式我认为是过于牵强了（前几作多少也有这种感觉）。</p><p>还有一点没想到的，我以为結城希亜这个角色会更加有深度的，没想到和第一作的九條都一样，成为了主线剧情的配角。没有命运的交织却几乎白给般的倒贴，个人克服心理障碍的过程过于迅速，过程的触动有些轻松诙谐，论冲击甚至可能不如 H Scene。</p><details><summary>以下剧透</summary>虽然最后想要传达世界线连结在一起，但表达能力依旧有限，在假 ed 后，对男主所经历的打击和绝望的刻画实在是太浅显了，像极了写文章到后期，写不下去草草收尾的我，建议学习命运石之门。本作将分枝连结在一起的方式过于粗暴，对我而言震撼感不够，也不能接受。<p>本系列的点题之笔在于 9 的设定，第 9 人就是在追求极致玩家与游戏的交互，但还是可惜，棋差一步。我认为编剧不可能不知道 4K 这种作品以及其正在挑战人机交互上所做的努力和挑战，虽然很激进，但不可谓不成功，本作想要通过剧情设定让玩家感受而非参与，我认为不算成功。作为玩家，我的感受是在 Episode 3 结局告知了我这一点，但是 Episode 4 并没有很好的考虑到玩家的参与感，从这个角度上来看，Episode 4 想做的东西太多，但又吝惜笔墨，最后看来各方面的丰满度都不足。</p><p>我曾夸张的说这部作品是 ever 17 精神续作，游戏的情节确实有些那个味道，但这也是游戏时的一些想法。晚些认真思考时又觉得，本作和 ever 17 的差距之大可能不能算继承了精神。</p></details><p>一部作品的评价需要结合所处的时代，同样的作品，放在十年前，或许会被诸多更有高度和深度的剧本所埋没，但在废萌当道的今日，这部作品是值得一玩的，作者是新人，再接再厉吧。</p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.tongmu.me/2021/03/30/review-9-nine/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>西安交大 - 春</title>
      <link>https://blog.tongmu.me/2021/03/02/photo-2021-03-02/</link>
      <guid>https://blog.tongmu.me/2021/03/02/photo-2021-03-02/</guid>
      <pubDate>Tue, 02 Mar 2021 12:40:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>关于花的照片。</p><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-03/DSC00137.jpg"></p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-03/DSC00143.jpg"></p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-03/DSC00151.jpg"></p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-03/DSC00168.jpg"></p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-03/DSC00171.jpg"></p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-03/DSC00176.jpg"></p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-03/DSC00190.jpg"></p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-03/DSC00191.jpg"></p><hr><p><img src="https://maple-blog.oss-cn-shanghai.aliyuncs.com/photography/2021-03/DSC00192.jpg"></p><p>评价：特写还行，风景找不到主体。</p>]]></content:encoded>
      
      
      
      <category domain="https://blog.tongmu.me/tags/%E6%91%84%E5%BD%B1/">摄影</category>
      
      
      <comments>https://blog.tongmu.me/2021/03/02/photo-2021-03-02/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>我为什么开始摄影</title>
      <link>https://blog.tongmu.me/2021/02/18/as-a-photographer-beginner/</link>
      <guid>https://blog.tongmu.me/2021/02/18/as-a-photographer-beginner/</guid>
      <pubDate>Thu, 18 Feb 2021 19:39:13 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这个过年，我购置了相机，学习了摄影的一些基础技术，准备培养一项业余爱好，这篇博客稍微聊一下我对于摄影的看法以及开始摄影的动机。</p><p>社团的同学一直有爱好摄影的，我之前没有参与的原因有两个：</p><ul><li>没钱</li><li>我相信眼睛看到的东西。在出门游玩的时候，甚至很少用手机拍照，当时我的看法是“将美留于心中”，所以把拍照的心思都用来欣赏风景了。</li></ul><p>因为社团里其实有很多器材，基础的摄影和摄像都能满足，所以第二点是主要的原因。</p><p>开始摄影当然是因为之前对其的看法有了变化，在我的生活中，不管是写博客、写代码，都属于一种创作。近年来发现自己的创作欲和动力都有所提升，这是个很好的变化，光看书不写笔记容易走马观花，而最重要的，我很懒，需要用一些任务来 push 自己，不然就容易陷入什么都不做，时间流走之后发现自己很空虚的困境。2020 一年里，关于各方面的事，我写了十多篇博客，2021 一定会更多。当然个人有购置相机的能力这一点也是很关键的。</p><p>相比于音乐演奏、绘画、各类设计，摄影作为一种<strong>创作</strong>的门槛要低得多，而且并没有明显的对错，只要画面没有明显的诟病之处，可以说每个人拍出来的照片，都是不一样的，都是属于个人的创作，并无明显的好坏之分。当然如果能力和时间允许，我很愿意学习乐器，至今都有用小提琴演奏「<a href="https://zh.wikipedia.org/wiki/G%E5%BC%A6%E4%B8%8A%E7%9A%84%E5%92%8F%E5%8F%B9%E8%B0%83">Air on the G String</a>」的愿望。</p><p>要拍摄什么样的照片，这个问题因人而异，对我而言，在这个初学阶段，因为正好人在老家，所以尝试拍摄了一些「回忆」，很多小时候经常去的地方，现在已经改变了模样，但身临其境的时候，还是能够构想出带有童年幻想色彩的画面。</p><p>另一个重要的原因是，我想留下回忆，我的眼睛所见到的许多画面，经常在梦中如跑马灯似的略过。但即使记忆再牢固，细节之处也会受到损害，虽然遗忘能带来新的遐想，在个人的脑海中产生新的美，但多一张照片总是不错的选择。</p><p>最后一点是，我不喜欢做无意义的事情，这也导致过多的时间宅在家里，摄影多少能让我多出门走走。十分感谢同为索狗，教了我不少摄影入门知识，并且让我白嫖镜头的 Tari 同学。</p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.tongmu.me/2021/02/18/as-a-photographer-beginner/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>确定性数据库发展史</title>
      <link>https://blog.tongmu.me/2021/02/01/deterministic-database-history/</link>
      <guid>https://blog.tongmu.me/2021/02/01/deterministic-database-history/</guid>
      <pubDate>Mon, 01 Feb 2021 15:21:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>确定性数据库是近年来一个新的研究热点，本文将沿着确定性数据库的发展历程，对其做一个基本的介绍。</p><h2 id="何为确定性"><a href="#何为确定性" class="headerlink" title="何为确定性"></a>何为确定性</h2><p>一言蔽之，确定性指的是“<strong>给定一个的输入集合，有且仅有唯一的输出结果</strong>”。但是在提到确定性数据库的时候，它最大的特点是“事务在开始时就是确定的，没有交互过程”。之所以这么说，是因为确定的事务输入，是唯一输出的必要不充分条件。本质原因在于，在交互式事务中，我们想让事务原子性的发生在一个时间点，但由于有了交互，事务过程中可能出现一些说不清、道不明的状态，包括但不限于：</p><ul><li>交互式事务会出现死锁状态，出现死锁时，哪个事务被 abort 是不可预知的</li><li>为了使事务不失败，在有些数据库有 auto retry 的逻辑，这一步也含有不确定性</li></ul><p>除了输入，在一个 DBMS 中，还有许多非确定性的环节，例如网络错误、节点损坏，确定性数据库需要保证整个系统对客户端是一个完美的黑盒。有的文章认为，在 2pl 的系统中，lock 顺序取决于网络传输和操作系统的线程调度吗，这也属于不确定性的一部分，本文不做这样的假设，因为在一个操作被返回到客户端之前，DBMS 内部做如何调度是自由的，即使是确定性数据库，也是依照已经输入的顺序进行执行，在输入顺序被确定之前，对于客户端仍然是未知的状态。</p><h2 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h2><p>本段将讲述历史上的确定性数据库和交互式数据库的区别，主要参考「An Overview of Deterministic Database Systems」<sup>[1]</sup>。</p><h3 id="有序持锁"><a href="#有序持锁" class="headerlink" title="有序持锁"></a>有序持锁</h3><p>锁的概念只存在于数据库的实现中，锁并不是数据库实现所必须的，这里的「锁」指的是获得向数据库写入或读取的权力。在确定性数据库中，有序持锁指的是拿锁优先级是按照<strong>事务发生的时间，也可以说是按照 input log 中的顺序</strong>。因为事务没有交互，所以我们可以认为事务的过程也是<strong>原子性</strong>的，即从其他任何事务观察一个事务，它比自身事务的所有操作要么早，要么晚，不存在它发生在自身事务的两个操作中间的情况。有序持锁带来的好处是：</p><ul><li>不会出现死锁。假设有两个事务 $ts(T_1) &lt; ts(T_2)$ 如果 $T_1$ 持有 $x$ 上的锁，$T_2$ 持有 $y$ 上的锁，随后在 $T_1$ 尝试去获取 $y$ 上的锁的时候，在交互式数据库中就会出现死锁的现象。而根据有序持锁的要求，此时 $T_1$ 应当持有 $x$ 和 $y$ 上的锁，$T_2$ 则需要等待 $y$ 上的锁释放。</li><li>不会出现结果不确定的锁竞争。假设有三个事务 $ts(T_1) &lt; ts(T_2) &lt; ts(T_3)$，如果 $T_1$ 持有 $x$ 上的锁，$T_2$ 和 $T_3$ 尝试去获取 $x$ 上的锁，在交互式数据库中他们都会陷入等待的状态，而当 $T_1$ 结束后，$T_2$ 和 $T_3$ 到底谁应该进入到持锁条件中是不确定的。而根据有序持锁的要求，此时应当由更早发生的 $T_2$ 持有 $x$ 上的锁。</li></ul><p>但是在物理上，事务的输入并不是一个瞬间的，原子性的过程，所以还是会出现死锁的情况，此时需要设计一个争夺锁的机制，即 $T_1$ 需要抢占 $T_2$ 持有 $y$ 上的锁。</p><p>Calvin<sup>[2]</sup> 采用了 Optimistic Lock Location Pre-diction(OLLP)<sup>[3]</sup>，把事务的运行分为两个阶段，在输入过程中，尝试加锁，输入结束后，再将事务加入到 input log 中，在上面死锁的例子中，$T_1$ 和 $T_2$ 都能够被成功的加入到 input log 中，之后会进入执行阶段，在这一阶段，$T_2$ 会发现自己实际没有持有 $y$ 上的锁（被 $T_1$ 抢占），此时这个事务会 abort，之后被重新加入到 input log 中。</p><h3 id="事务依赖图"><a href="#事务依赖图" class="headerlink" title="事务依赖图"></a>事务依赖图</h3><p>根据事务依赖图定义的隔离级别是「Generalized Isolation Level Definitions」<sup>[4]</sup>所提出的与数据库实现无关的隔离级别。此前影响较大的隔离级别定义主要是 <a href="https://en.wikipedia.org/wiki/SQL-92">ANSI SQL-92</a> 和「A Critique of ANSI SQL Isolation Levels」<sup>[5]</sup>。</p><p>ANSI SQL-92 通过列举 Anomaly 的方式提出了四项隔离级别，也是当今最常用的隔离级别：</p><ul><li>Read uncommitted</li><li>Read committed</li><li>Repeatable reads</li><li>Serializable</li></ul><p>「A Critique of ANSI SQL Isolation Levels」这篇文章认为 ANSI SQL-92 的定义过于简略，并对其做了补充，提出了一些新的 Anomaly，其中的 Snapshot Isolation 因为和 MVCC 的吻合度高，被被广泛使用。</p><p><img src="a-critique-of-ansi-sql-lsolation-levels.png" alt="a-critique-of-ansi-sql-lsolation-levels.png"></p><p>在「A Critique of ANSI SQL Isolation Levels」之前，ANSI SQL-92 的定义不明确造成了商业数据库标称隔离级别的混乱，这一现象影响至今，在 ANSI SQL-92 的定义中，只要不发生 Dirty reads, Non-repeatable reads, Phantom reads 就属于 Serializable 的隔离级别，但这明显和 Serializable 的语义不符，Write skew 就是一个很好的反例。但是这篇文章依旧没有解决隔离级别的定义与数据库实现相关的问题，甚至更加深入了数据库的实现细节，最终解决这一问题的是「Generalized Isolation Level Definitions」，Adya 等人提出了基于依赖图对隔离级别进行定义的方式。</p><p><img src="generalized-isolation-level-definitions.png" alt="generalized-isolation-level-definitions.png"></p><p>从这一隔离级别鲜为人知的事实就可以看出，这套定义相当的不遭人待见，这里以作者的拙见，简要分析一下其原因。上图就是「Generalized Isolation Level Definitions」给出的隔离级别定义，这个定义有着简洁的美感。但是问题在于，如果数据库不能达到 PL-3 的隔离级别（这一级别类似于真正的 Serializable），依照这个定义，很有可能会掉落到 PL-2 上面去，而与 PL-2 类似的隔离级别是 Read committed<sup>6</sup>。商业数据库固然是尽可能将自己的隔离级别定义成高的，在 ANSI SQL-92 的定义下，Snapshot isolation 能够摸到 Serializable 的下限以至于有的数据库就可以声称自己是 Serializable 的，而在这套隔离级别下，很可能就只能被标识为 PL-2 了。作者显然也意识到了这个问题，特意在 PL-2 和 PL-3 之间开了个洞——PL-2.99，简单的解释 PL-2.99 与 PL-3 的区别就是 PL-2.99 允许 Phantom 现象，而 PL-3 不允许。这个洞使得 ANSI SQL-92 能够在这一套隔离级别中找到自己的定位，但对于「A Critique of ANSI SQL Isolation Levels」所提出的更精细的定义来说，这套隔离级别的分级跨度过于大了。</p><p>但是事务依赖图在确定性数据库里有了广泛的应用，因为他所给出的定义非常简单，并且很适合确定性数据库去实现，如果能够达到 PL-3 或者 PL-2.99 的隔离级别，那么这个数据库的隔离性就得到了保障。确定性数据库就是基于这一点，对事务进行分析，尤其在冲突场景，对事务的重排使得在交互式事务中需要等待解决冲突的场景能够并行提交，考虑以下几个事务。</p><table><thead><tr><th>$T_1$</th><th>$T_2$</th><th>$T_3$</th></tr></thead><tbody><tr><td>$w(x, 1)$</td><td></td><td></td></tr><tr><td></td><td>$w(x, 2)$</td><td></td></tr><tr><td></td><td></td><td>$r(x)$</td></tr></tbody></table><p>在一般的数据库实现中，我们通常要让 $T_1$ 阻塞住 $T_2$ 的写入，但是在充分优化的确定性数据库中，我们可以直接写入 $w(x, 2)$，而忽略 $w(x, 1)$，并且让 $T_3$ 直接读到 $T_2$ 的写入结果（不必从存储引擎里读取）。</p><h3 id="Coordination"><a href="#Coordination" class="headerlink" title="Coordination"></a>Coordination</h3><p>在这一节，我们假设存在一个理想的数据库，研究它与使用 Percolator 模型<sup>[7]</sup>（Two-phase commit）的区别和优劣势。</p><p>The only coordination that needs to happen in a deterministic database system is the communication required to agree on the input to the system.<sup>[1]</sup></p><p>在一个分布式的确定性数据库中，唯一需要达成的共识在于哪些事务能够被添加到 input log 当中去，在达成这一步共识之后，我们就可以根据当前的状态和 input log 得到唯一的输出结果。</p><table><thead><tr><th>Deterministic Commit</th><th>Two-phase commit</th></tr></thead><tbody><tr><td>Coordination the input log(ordering)</td><td>Prewrite with lock</td></tr><tr><td>Commit input log</td><td>Commit &amp; erase lock &#124; primary</td></tr><tr><td></td><td>Commit &amp; erase lock &#124; secondaries</td></tr></tbody></table><p>此处，确定性数据库的 Commit input log 和 2pc 的 Prewrite with lock 的 keys 是同一个数量级的，而关键点在于 Deterministic Commit 的定序步骤（ordering）的开销和 2pc 的失败清理成本之间的比较。在两个事务冲突时，Deterministic 的 ordering 步骤能够协调这一点，而 2pc 需要 abort 一个事务，随后异步清理其 prewrite 的数据；在多个事务出现成环依赖时，ordering 步骤应该阻止某一个事务进入 input log，而 2pc 依旧会让某一个事务 abort，留下需要被清理的数据。</p><p>2pc 的一大优势是水平扩展容易，因为它在执行时候不需要考虑事务与事务之间的关系，而 Deterministic 的 ordering 步骤在大规模并行化的事务提交场景中，成本也会随之升高，尤其是分布式 ordering，至今仍是一大难题。</p><p>这里我不敢讲述太详细的实现，因为过于细致会偏离 Deterministic 的共性点，在后文对确定性数据库历史做说明的时候会讲述每个数据库单独的处理策略。</p><h2 id="历史上的确定性数据库"><a href="#历史上的确定性数据库" class="headerlink" title="历史上的确定性数据库"></a>历史上的确定性数据库</h2><h3 id="H-Store-8"><a href="#H-Store-8" class="headerlink" title="H-Store[8]"></a>H-Store<sup>[8]</sup></h3><p>一个非常简单的实现确定性的数据库的做法是，只要没有并发，那么 Serializable 和 Deterministic 就是信手拈来的，这个做法虽然简单，但是也带来了不可忽视的性能损失——无法利用多核 CPU，无法做到横向扩展。H-Store 是一个分布式内存数据库，它将数据分片，以 site 为最小单位，在每个 site 中，数据是没有并发的。这么设计的原因是 H-Store 假设 OLTP 型事务很短，并且主要瓶颈在于 I/O 延迟，在使用内存优化掉 I/O 延迟，并且在不同的 site 之间设计并发机制，其并发度已经足以应对当时的 OLTP 场景。H-Store 将事务分为两类：</p><ul><li>Single-sited Transactions，只存在于一个 site 上的事务，将事务发送到对应的 site 上去执行</li><li>One-shot Transactions，涉及到多个 sites，但是每一条语句只存在于一个 site 上</li></ul><p>尽管 H-Store 的论文里没有提到 Deterministic，但其分片后顺序化执行的思路还是被认为是一种 Deterministic 的尝试。</p><h3 id="Calvin-2"><a href="#Calvin-2" class="headerlink" title="Calvin[2]"></a>Calvin<sup>[2]</sup></h3><p>「The Case for Determinism in Database Systems」<sup>[3]</sup>设计了一个接受所有事务请求的节点，这个节点还会将事务持久化，然后按照接收到事务的 ts 将事务加入到 input log 里面去。这个设计存在的问题在于单点，包括出现故障时无法恢复和扩展规模时候的单点性能瓶颈。Calvin 添加了一个 sequencer layer。</p><p><img src="calvin-fast-distributed-transactionsfor-partitioned-database-systems-1.png" alt="calvin-fast-distributed-transactionsfor-partitioned-database-systems-1.png"></p><p>我们只关注图中的 replica A 部分，每 10ms，sequencer 会将自己所接受到的事务发送给 scheduler，每个 scheduler 上都有一个 lock manager。<strong>Lock manager 只管理自身节点所持有的数据的持锁信息，分配锁是单线程进行的。</strong>在分配锁的过程中，必须遵守上文所提到的<a href="#%E6%9C%89%E5%BA%8F%E6%8C%81%E9%94%81">有序持锁</a>的规则，分配锁的过程中需要每个 Lock manager 将自己所要读写的 key 发送到一个节点上。</p><table><thead><tr><th>scheduler1 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.986ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3529.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mo" transform="translate(389, 0)"><use xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(1167, 0)"><use xlink:href="#MJX-1-TEX-N-221E"></use></g><g data-mml-node="mo" transform="translate(2167, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2611.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(3140.7, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container></th><th>scheduler2 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.465ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1973.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(707, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1151.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D450"></use></g><g data-mml-node="mo" transform="translate(1584.7, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container></th><th>scheduler3 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.517ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3322.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-1-TEX-I-1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-N-221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-1-TEX-I-1D450"></use></g><g data-mml-node="mo" transform="translate(711, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mo" transform="translate(1155.7, 0)"><use xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(1933.7, 0)"><use xlink:href="#MJX-1-TEX-N-221E"></use></g><g data-mml-node="mo" transform="translate(2933.7, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container></th></tr></thead><tbody><tr><td>$T_1(w(a, 1))$</td><td></td><td></td></tr><tr><td>$T_2(w(a, 2))$</td><td>$T_2(w(b, 2))$</td><td>$T_2(w(c, 2))$</td></tr><tr><td></td><td></td><td>$T_3(w(c, 3))$</td></tr></tbody></table><p>其中，$ts(T_1)&lt;ts(T_2)&lt;ts(T_3)$。</p><p>根据我的理解，跨 node 的事务需要被发送到所有涉及到的节点，之后在 node 本地进行排序执行，需要注意的是，当事务对发送到 scheduler 的时候，他已经不允许失败了，所以 Calvin 会在持久化输入事务之后再将他们发送到 scheduler 节点。对于 $T_2$，我认为 sequencer 应该分割之后，分别发送给参与该事务的 scheduler。</p><p><img src="calvin-fast-distributed-transactionsfor-partitioned-database-systems-2.png" alt="calvin-fast-distributed-transactionsfor-partitioned-database-systems-2.png"></p><p>图为 Calvin 的 TPC-C 性能测试，这里 Calvin 是按照 warehouse 进行分区的，每个 partition 上存在 10 个 warehouses，通过安排 warehouses 的分布，使得大部分事务对于 sequencer 来说都是本地事务，这里极大的缩小了定序过程中的开销。</p><p><img src="calvin-fast-distributed-transactionsfor-partitioned-database-systems-3.png" alt="calvin-fast-distributed-transactionsfor-partitioned-database-systems-3.png"></p><p>在这个 benchmark 中，可以看到比起高冲突场景，Calvin 更加不适应分布式事务（非本地事务）。但是分布式事务虽然吞吐较低，仍然可以线性扩容，而高冲突场景随着节点的增加，其吞吐增长不呈线性。</p><p>以我的看法，Calvin 是一个好架构，但是冲突事务的能力有待提升。</p><h3 id="BOHM-9"><a href="#BOHM-9" class="headerlink" title="BOHM[9]"></a>BOHM<sup>[9]</sup></h3><p>从 BOHM 开始，Deterministic Database 进入了高速路，伴随着越来越特化的架构，产生了如摩尔定律般增长的 QPS。</p><p>BOHM 的特点在于：</p><ul><li>中心化递增的 ts 分配</li><li>改变了 MVCC 的实现方式，让 Serializable 的实现不以大量牺牲性能为代价</li><li>引入了<a href="#%E4%BA%8B%E5%8A%A1%E4%BE%9D%E8%B5%96%E5%9B%BE">事务依赖图</a>，让原本不能并发执行的事务变得可并发</li></ul><p><img src="rethinking-serializable-multiversion-concurrency-control-1.png" alt="rethinking-serializable-multiversion-concurrency-control-1.png"></p><p>BOHM 的 version 有五个字段</p><ul><li>Begin ts，数据写入的 ts</li><li>End ts，数据失效的 ts</li><li>Txn pointer，写入该 version 的事务指针</li><li>Data</li><li>Prev pointer，上一个版本的指针</li></ul><p>Version 的有效期是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="17.033ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7528.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-1-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-1-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-5F" d="M0 -62V-25H499V-62H0Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(278, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(747, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(1108, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(1637, 0)"><use xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mi" transform="translate(2088, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(2449, 0)"><use xlink:href="#MJX-1-TEX-N-5F"></use></g><g data-mml-node="mi" transform="translate(2949, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(3310, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(3779, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(4223.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(4689.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(5289.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(5809.7, 0)"><use xlink:href="#MJX-1-TEX-N-5F"></use></g><g data-mml-node="mi" transform="translate(6309.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(6670.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(7139.7, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>。图中 $T_{100}$ 和 $T_{200}$ 这两个事务都尝试写了 $a$ 这个 key，于是创造了两个版本，一个 version 的有效期是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="9.302ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4111.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(278, 0)"><use xlink:href="#MJX-1-TEX-N-31"></use><use xlink:href="#MJX-1-TEX-N-30" transform="translate(500, 0)"></use><use xlink:href="#MJX-1-TEX-N-30" transform="translate(1000, 0)"></use></g><g data-mml-node="mo" transform="translate(1778, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mn" transform="translate(2222.7, 0)"><use xlink:href="#MJX-1-TEX-N-32"></use><use xlink:href="#MJX-1-TEX-N-30" transform="translate(500, 0)"></use><use xlink:href="#MJX-1-TEX-N-30" transform="translate(1000, 0)"></use></g><g data-mml-node="mo" transform="translate(3722.7, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>，另一个是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="9.931ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4389.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-N-221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(278, 0)"><use xlink:href="#MJX-1-TEX-N-32"></use><use xlink:href="#MJX-1-TEX-N-30" transform="translate(500, 0)"></use><use xlink:href="#MJX-1-TEX-N-30" transform="translate(1000, 0)"></use></g><g data-mml-node="mo" transform="translate(1778, 0)"><use xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mo" transform="translate(2222.7, 0)"><use xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(3000.7, 0)"><use xlink:href="#MJX-1-TEX-N-221E"></use></g><g data-mml-node="mo" transform="translate(4000.7, 0)"><use xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>。Txn pointer 指针分别指向写入他们的事务，Prev pointer 指针指向前一个 version， $T_{200}$ 对应的 version 的 Data 字段为为未初始化。</p><p>读操作在写操作完成之后进行，在读取一个 key 的时候，会找到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="34.047ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15048.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path><path id="MJX-1-TEX-I-1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path><path id="MJX-1-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-1-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-1-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-1-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-N-5F" d="M0 -62V-25H499V-62H0Z"></path><path id="MJX-1-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-N-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path id="MJX-1-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1-TEX-N-7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-N-7B"></use></g><g data-mml-node="mi" transform="translate(500, 0)"><use xlink:href="#MJX-1-TEX-I-1D463"></use></g><g data-mml-node="mi" transform="translate(985, 0)"><use xlink:href="#MJX-1-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(1451, 0)"><use xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mi" transform="translate(1902, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(2371, 0)"><use xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(2716, 0)"><use xlink:href="#MJX-1-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(3201, 0)"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(4078.8, 0)"><use xlink:href="#MJX-1-TEX-N-2223"></use></g><g data-mml-node="mi" transform="translate(4634.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(5103.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(5464.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(5993.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mi" transform="translate(6444.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(6805.6, 0)"><use xlink:href="#MJX-1-TEX-N-5F"></use></g><g data-mml-node="mi" transform="translate(7305.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(7666.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(8413.3, 0)"><use xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(9469.1, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(9830.1, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(10576.9, 0)"><use xlink:href="#MJX-1-TEX-N-3C"></use></g><g data-mml-node="mi" transform="translate(11632.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(12098.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(12698.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(13218.7, 0)"><use xlink:href="#MJX-1-TEX-N-5F"></use></g><g data-mml-node="mi" transform="translate(13718.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(14079.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(14548.7, 0)"><use xlink:href="#MJX-1-TEX-N-7D"></use></g></g></g></svg></mjx-container>（原文为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="34.047ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15048.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path><path id="MJX-1-TEX-I-1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path><path id="MJX-1-TEX-I-1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-1-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-1-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-1-TEX-I-1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-N-5F" d="M0 -62V-25H499V-62H0Z"></path><path id="MJX-1-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-1-TEX-N-7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-N-7B"></use></g><g data-mml-node="mi" transform="translate(500, 0)"><use xlink:href="#MJX-1-TEX-I-1D463"></use></g><g data-mml-node="mi" transform="translate(985, 0)"><use xlink:href="#MJX-1-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(1451, 0)"><use xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mi" transform="translate(1902, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(2371, 0)"><use xlink:href="#MJX-1-TEX-I-1D456"></use></g><g data-mml-node="mi" transform="translate(2716, 0)"><use xlink:href="#MJX-1-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(3201, 0)"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(4078.8, 0)"><use xlink:href="#MJX-1-TEX-N-2223"></use></g><g data-mml-node="mi" transform="translate(4634.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mi" transform="translate(5103.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(5464.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(5993.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mi" transform="translate(6444.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(6805.6, 0)"><use xlink:href="#MJX-1-TEX-N-5F"></use></g><g data-mml-node="mi" transform="translate(7305.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(7666.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(8413.3, 0)"><use xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(9469.1, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(9830.1, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(10576.9, 0)"><use xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(11632.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D452"></use></g><g data-mml-node="mi" transform="translate(12098.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(12698.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D451"></use></g><g data-mml-node="mi" transform="translate(13218.7, 0)"><use xlink:href="#MJX-1-TEX-N-5F"></use></g><g data-mml-node="mi" transform="translate(13718.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D461"></use></g><g data-mml-node="mi" transform="translate(14079.7, 0)"><use xlink:href="#MJX-1-TEX-I-1D460"></use></g><g data-mml-node="mo" transform="translate(14548.7, 0)"><use xlink:href="#MJX-1-TEX-N-7D"></use></g></g></g></svg></mjx-container>，怀疑有误），为了防止读到一个未初始化的值，当 $T_i$ 尝试读取 $T_j$ 的写入时，我们称 $T_i$ RaW(Read after Write) 依赖于 $T_j$，$T_i$ 需要在 $T_j$ 完成之后再开始执行。</p><p>如果 $T_i$ 和 $T_j$ 都尝试写入 $x$，并且他们之间没有读取依赖，得益于 MVCC，他们可以并行写入。</p><p><img src="rethinking-serializable-multiversion-concurrency-control-2.png" alt="rethinking-serializable-multiversion-concurrency-control-2.png"></p><p>Benchmark 表明，越高冲突的场景，BOHM 的效果越好，在高冲突高并发的情况下，乐观事务模型出现了大幅度的性能回退。</p><h3 id="PWV-10"><a href="#PWV-10" class="headerlink" title="PWV[10]"></a>PWV<sup>[10]</sup></h3><p>在一般的数据库系统中，一个事务的数据要被其他事务看见，有两种机制：</p><ul><li>提交可见性，一但一个事务完成了提交，它所写入的数据就能够被其他事务所读取到，其优点在于事务与事务的耦合性低。但是在一个 Serializable 的系统中，这一策略可能会增加延迟、降低整体的并行度。</li><li>写入可见性，一个事务即使没有提交，他所写入的数据就可以被其他事务读到，但是如果这个事务最后失败了，读取到其数据的事务也需要 abort 防止脏读。Abort 是连锁式的，可能会付出极大的代价。</li></ul><p>这篇文章进一步将事务 abort 的原因分为两类：</p><ul><li>逻辑原因，事务违反了约束条件</li><li>系统原因，包括死锁，系统错误，乐观事务中的写冲突</li></ul><p>但是在确定性数据库中，abort 只会因为两个原因产生：</p><ul><li>逻辑原因，同上</li><li>写入可见带来的 abort，$T_2$ 需要根据 $T_1$ 的写入值去修改某个值，这一修改可能会因 $T_1$ 的结果产生逻辑原因的 abort</li></ul><p>为了防止以上原因带来的脏读，论文设计了一个叫 commit point 的概念，一但事务达到了 commit point，这个事务就一定可以提交，并将写入分为两类：</p><ul><li>在 commit point 之前的，可能会 abort，需要在 commit point 之后被读取到</li><li>在 commit point 之后的，不会 abort，一但写入成功就能被读取到</li></ul><p>论文进一步将事务按照 commit point 分割为 pieces，并且引入 rendezvous point(RVP) 来标记一个 piece 的依赖是否已经完成执行。(I’m not quite sure for this mechanism)</p><p>我们用 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="12.156ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5373.1 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path><path id="MJX-1-TEX-I-1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path><path id="MJX-1-TEX-N-2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-1-TEX-N-2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"></path><path id="MJX-1-TEX-I-1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path><path id="MJX-1-TEX-N-7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><use xlink:href="#MJX-1-TEX-N-7B"></use></g><g data-mml-node="mi" transform="translate(500, 0)"><use xlink:href="#MJX-1-TEX-I-1D443"></use></g><g data-mml-node="mo" transform="translate(1528.8, 0)"><use xlink:href="#MJX-1-TEX-N-2223"></use></g><g data-mml-node="mi" transform="translate(2084.6, 0)"><use xlink:href="#MJX-1-TEX-I-1D443"></use></g><g data-mml-node="mo" transform="translate(3113.3, 0)"><use xlink:href="#MJX-1-TEX-N-2286"></use></g><g data-mml-node="mi" transform="translate(4169.1, 0)"><use xlink:href="#MJX-1-TEX-I-1D447"></use></g><g data-mml-node="mo" transform="translate(4873.1, 0)"><use xlink:href="#MJX-1-TEX-N-7D"></use></g></g></g></svg></mjx-container> 来代表执行的最小单位 piece，根据上文对 abort 原因的分析，当两个事务产生冲突时，只应该 abort 发生在 commit point 之前的 P。</p><p><img src="high-performance-transactions-via-early-write-visibility.png" alt="high-performance-transactions-via-early-write-visibility.png"></p><p>和 BOHM 类似，PWV 在高冲突场景下的表现十分喜人，相比之下 OCC 在极端的高冲突场景下临近奔溃。</p><p>PWV 的论文实现还有许多细节，核心思想就是让事务在完全提交前就能被读取到的同时处理写写依赖，其实现远比想法复杂，这里不再详细展开了。</p><h3 id="Aria-11"><a href="#Aria-11" class="headerlink" title="Aria[11]"></a>Aria<sup>[11]</sup></h3><p>BOHM, PWV 和 Calvin 的策略都是定序-执行两阶段，Aria 提出了一个新的想法，如果定序和执行能够放在一起，是否能取得更好的性能、以及在不同场景下更加均衡的表现（更好的泛用性）呢？</p><p>Aria 在执行阶段采用 reservation 的机制，并且以全局递增的事务 id 作为优先级的标准（这一机制是达成 deterministic）的关键。如果 $ts(T_1) &lt; ts(T_2)$，$T_2$ 对 $x$ 做了 reservation，当 $T_1$ 也尝试对 $x$ 做 reservation 的时候，会发现 $x$ 被一个 id(此处为 ts) 比它大的事务占有了，于是就会发生强占。</p><p><img src="aria-a-fast-and-practical-deterministic-oltp-database-1.png" alt="aria-a-fast-and-practical-deterministic-oltp-database-1.png"></p><p>在 Aria 的 batch commit 机制中，冲突事务会被安排到下一个 batch，而因为被安排到下一个 batch 的事务的 id 必然享有比所以新事务更高的优先级，所以它不会因为诸如线程调度的原因被无限制的 delay。</p><p>在使用 reservation 机制的同时，会发现它使得可以并发执行的冲突事务不能执行了，包括 RaW 和 WaW，因为冲突的事务会被安排到下一个 batch，这导致高冲突场景下事务可能是串行执行的。为了解决这一问题，Aria 也引入了重拍机制。</p><p>其中有一个小技巧是将 RaW 转化为 WaR，消除一部分 reservation 冲突。如果 $ts(T_1) &lt; ts(T_2)$ 并且 $T_2$ RaW 依赖于 $T_1$，$T_2$ 理应被放到下一个 batch，这样事务执行的顺序是 $T_1 \to T_2$，但只要我们调换这一顺序，让它变成 $T_2 \to T_1$，这一依赖就变成了 $T_1$ WaR 依赖于 $T_2$。</p><p>在应对高频 WaW 的场景，Aria 会在 commit 阶段结束后尝试去提交冲突的事务，称为 Aria-FB，但由于给全局增加了一个阶段，这一策略的效果有待商榷。</p><p><img src="aria-a-fast-and-practical-deterministic-oltp-database-2.png" alt="aria-a-fast-and-practical-deterministic-oltp-database-2.png"></p><p>左图为随着偏态值（一定程度代表冲突概率）提升时，不同确定性事务模型的性能变化，处理小于 0.5 偏态值的场景时，Aria 的表现都较为平滑。右图的 TPC-C benchmark，随着 warehouse 的提升，Aria 的稳定性也逐步提高，其吞吐量越来越接近 PWV。</p><p>我认为 Aria 与 BOHM 和 PWV 最大的区别在于，它不再追求极端冲突场景下的性能，而将目光转向离现实更加接近的目标，提升多场景下的稳定性，同时在极端场景下也能保留一部分确定性数据库的优势。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文大致梳理了历史上的确定性数据库，里面也夹杂了作者的一些个人观点。整体而言，确定性数据库的发展经历了从为了解决一些特定问题，演变成追求高冲突场景下的性能，最后回归到构建泛用的确定性模型上。</p><p>我认为，在工业界，确定性数据库的思想能够解决一些问题，但其中存在这许多学术研究中不会涉及到的难题，还需要大量的时间和实验去验证。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>[1] <a href="https://www.cs.umd.edu/~abadi/papers/abadi-cacm2018.pdf">An Overview of Deterministic Database Systems</a></li><li>[2] <a href="https://cs.yale.edu/homes/thomson/publications/calvin-sigmod12.pdf">Calvin: Fast Distributed Transactions for Partitioned Database Systems</a></li><li>[3] <a href="https://www.cs.umd.edu/~abadi/papers/determinism-vldb10.pdf">The Case for Determinism in Database Systems</a></li><li>[4] <a href="http://pmg.csail.mit.edu/papers/icde00.pdf">Generalized Isolation Level Definitions</a></li><li>[5] <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr-95-51.pdf">A Critique of ANSI SQL Isolation Levels</a></li><li>[6] <a href="https://github.com/jepsen-io/elle/blob/531ea9afe5e7a27dc414cd51b4ec0dc4bb6e8e68/src/elle/consistency_model.clj#L136-L137">Elle’s consistency model</a></li><li>[7] <a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/36726.pdf">Large-scale Incremental Processing Using Distributed Transactions and Notifications</a></li><li>[8] <a href="https://www.vldb.org/pvldb/vol1/1454211.pdf">H-Store:AHigh-Performance, Distributed Main Memory Transaction Processing System</a></li><li>[9] <a href="http://www.vldb.org/pvldb/vol8/p1190-faleiro.pdf">Rethinking serializable multiversion concurrency control</a></li><li>[10] <a href="http://www.vldb.org/pvldb/vol10/p613-faleiro.pdf">High Performance Transactions via Early Write Visibility</a></li><li>[11] <a href="https://yilu.dev/papers/p2047-lu.pdf">Aria: A Fast and Practical Deterministic OLTP Database</a></li></ul>]]></content:encoded>
      
      
      
      
      <comments>https://blog.tongmu.me/2021/02/01/deterministic-database-history/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Review「WILL: A Wonderful World」</title>
      <link>https://blog.tongmu.me/2021/01/29/review-will-a-wonderful-world/</link>
      <guid>https://blog.tongmu.me/2021/01/29/review-will-a-wonderful-world/</guid>
      <pubDate>Fri, 29 Jan 2021 20:07:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>steam: <a href="https://store.steampowered.com/app/588040/WILL_A_Wonderful_World__WILL/">https://store.steampowered.com/app/588040/WILL_A_Wonderful_World__WILL/</a></li></ul><p>游戏时长大约 10h 多一些，我很喜欢的游戏风格，通过上帝视角观察一个故事，和《十三机兵防卫圈》的叙事手法有点相似，而游戏方式非常有创意。</p><h2 id="整体评价"><a href="#整体评价" class="headerlink" title="整体评价"></a>整体评价</h2><p>优点</p><ul><li>剧情非常有趣，比国产半吊子 gal 和日本废萌强太多</li><li>游戏形式新颖，关卡设计巧妙</li><li>文字的表达能力极强</li></ul><p>缺点</p><ul><li>部分关卡设计有些不明确，以至于我不得不靠穷举法来过关</li><li>角色对话没有 log</li><li>立绘再多点就好了。虽然已经很多了，但文字量也着实不小，很多章节还是纯文字的</li></ul><h2 id="我的一些个人意见"><a href="#我的一些个人意见" class="headerlink" title="我的一些个人意见"></a>我的一些个人意见</h2><p>游戏内角色之间的交互多以文字关系而非逻辑关系为主，结果是角色之间的关联性不强，所有的登场角色没有行成一个整体。没有整体性给游戏后期带来的影响就是不能通过所有角色都登场的情节设计来叙事，导致但看某一个角色的剧情都不长，意犹未尽。</p><p>因为是基于文字的，像“门开了”这种词汇，可能会有多义，可以是指房间门，也可以是指箱子。通过文字逻辑的排列来改变语言想要表达的思想，很好玩的游戏设计。但是关卡设计质量不一，有些关卡我直接穷举。</p><p>音乐我觉得挺好的，但没有出现像「Seaside Vacation」这种游戏气氛代入感惊艳的音乐，但毕竟是独立游戏，目前的质量已经很强了。</p><p>我是用手柄玩的，在模拟鼠标操作的时候，游戏有小 bug，除此之外，手柄的游戏体验很好。</p><p>玩游戏的时候手边没有咖啡 :(</p><p>这个游戏所展现出来的故事，不是喜剧、也不是悲剧，大概是喜中有一些物哀的成分，游戏中有的角色的悲剧是不可避免的，即使是「神」在改写命运，亦有生离死别。只是如果没有玩家扮演的“神”，这些人原本的命运可能就是错过自己所追寻的东西罢了。</p><p>总评分 8.5/10。</p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.tongmu.me/2021/01/29/review-will-a-wonderful-world/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「罗素悖论」、自然语言和 void*</title>
      <link>https://blog.tongmu.me/2021/01/24/russell-paradox-nl-void-any/</link>
      <guid>https://blog.tongmu.me/2021/01/24/russell-paradox-nl-void-any/</guid>
      <pubDate>Sun, 24 Jan 2021 18:26:08 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>「罗素悖论」在很多地方都有提到，还有个比较通俗易懂的说法是「理发师悖论」，即：</p><center>小城里的理发师放出豪言：他要为城里人刮胡子，而且一定只要为城里所有“不为自己刮胡子的人”刮胡子。<br>但问题是：理发师该为自己刮胡子吗？</center><p>很多文章把这个悖论摆到读者面前的同时，自身却仿佛视悖论为公理的退缩了。「罗素悖论」对集合论带来了一波冲击，指出了其缺陷。数学家们的严谨使得这一悖论所指出的问题被「<a href="https://zh.wikipedia.org/wiki/%E7%BD%97%E7%B4%A0%E5%85%AC%E7%90%86%E4%BD%93%E7%B3%BB#%E7%B1%BB%E7%9A%84%E5%86%85%E6%B6%B5%E5%85%AC%E7%90%86">类的内涵公理</a>」所避免；而维特根斯坦则在「逻辑哲学论」中指出「罗素悖论」在讨论不能说的东西，应当避免这种无意义的讨论。</p><h2 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h2><p>根据维的观点，我们的语言是有界限的，当我们超出认知去谈论的一个东西的时候，这就是胡话（nonsense）。例如我命名不可知的一种外星生物叫「八爪鱼」，随之对它的任何描述都没有意义。回到「罗素悖论」并把条件稍加修改，我们假设存在一个「所有我的语言所不能描述的所形成的集合」，那么这个集合本身是否存在于它自身呢？相比于「八爪鱼」这里更加抽象一些，「所有我的语言所不能描述的所形成的集合」，是一个不可被讨论的东西，下了定义并不足以说明这是件被语言所说清楚、可以描述的事情，因为：</p><ul><li><ol><li>世界是一切发生的事情。</li></ol></li><li>5.6 我的语言的界限 意味我的世界的界限。</li></ul><p>所以我们能讨论的集合仅是「所有我的语言能描述的所形成的集合」，而非其互斥集。</p><p>自然语言是不严谨的，我们要时刻小心使用中出现的逻辑漏洞，并严谨的用它作为讨论的工具，让我们进入到愉快的程序语言。</p><p>void* 是什么？</p><p>void* 可以是任何东西！他是「所有我所知道的类型所形成的集合」+「所有我所不知道的类型所形成的集合」，我们令 P 是「所有我所知道的类型所形成的集合」，Q 是「所有我所不知道的类型所形成的集合」。那么 P 里面所有的事情，我都能说的清清楚楚；而 Q 里面所发生的任意一件事，对我们而言都是不明真相的二进制编码。</p><h2 id="自成性"><a href="#自成性" class="headerlink" title="自成性"></a>自成性</h2><p>自举已然是编程语言的常见行为，一门图灵完备的编程语言当然可以实现它自身。在一个对编译器不了解的人读到这句话时，很可能想到的和编译器/解释器所做的大相庭径。我也算不得什么编译器专家，所以结合「逻辑哲学论」的观点，在这里谈一下我对于自举这件事情的看法。</p><p>维特根斯坦在「逻辑哲学论」想要表达的重要观点之一就是把他所写的这本书以及其立场也至于一个被自身否定的地位。这本书是用自然语言撰写的，那么我们不禁想问：如何保证你所使用的自然语言中所用到的对象是你所了解、清楚的呢？如果我们遵守“对于不可说的东西我们必须保持沉默(7)”这一原则，是否会陷入一个没有东西可以说的状态呢？因此维把自己的逻辑也立于这样一个地位，如果你尝试用不可说（nonsense）来否定这本书，那么其否定的立场本身所基于的一定是某些“我们所知道、可以说的”真理。维想要的到的效果是，这一假定的真理本身就是给了这本书一个基石，即当这是“可以说”的时候，论调是成立的，这是“不可说”的时候，对其的否定也处于“不可说”的地位。我们只需要谨慎的，不在“不可说”的领域去应用这一套理论，就不会犯错误。</p><p>回到编程语言中，我们需要谨慎的，不在“不可说”（undefined behavior 甚至是不合理的语法）的领域中去应用编程语言，他就是能够说明白的。编程语言比起自然语言更严谨，更不容易犯错误，编译器/解释器甚至保证你在编写过程中不越过“不可说”的边界。那么编程语言自举的根基（可说的真理）究竟在哪呢？</p><p>我们尚且不把链接器考虑到我们所说的编程语言的一部分中去，假设这里所指编程语言仅仅是编译器前端。编程语言的工作是，假设我们生成的 IR 能够在一个完美的状态机上运行的情况下，根据所掌握的这一些“真理”，去构建一套语言体系。至此，我们回避了很多的论证，剩下的问题是，一门语言能否描述清楚他自己？</p><p>一门要描述清楚他自己，首先就要求，这们语言是不能讲胡话（nonsense）的，例如一个函数接受 T 类型，返回非 T 的某种类型，这就是胡话。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">A</span></span> = [<span class="built_in">u8</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Any</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Any <span class="keyword">for</span> &amp;A &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">make_sense</span></span>&lt;T&gt;(input: T) -&gt; T &#123;</span><br><span class="line">    input</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">russell_paradox</span></span>&lt;T&gt;(input: &amp;T) -&gt; <span class="built_in">Box</span>&lt;<span class="keyword">dyn</span> Any&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> r = <span class="keyword">unsafe</span> &#123; *(input <span class="keyword">as</span> *<span class="keyword">const</span> T <span class="keyword">as</span> *<span class="keyword">const</span> &amp;A) &#125;;</span><br><span class="line">    <span class="built_in">Box</span>::new(r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> _a = make_sense(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">let</span> b = russell_paradox(&amp;<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">let</span> c = russell_paradox(&amp;b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于“非 T 的某种类型”难以表示，此处用一个 Any 类型来表示（不同于 std::any::Any，这里的 Any 连 type_id 方法都没实现，是一个真正的不知道类型的玩意），我们假设 russell_paradox 这个函数接受类型 T，返回一个类型不是 T 的值，第一次调用这个函数，我们的到了 b，第二次用 b 得到 c，问题是 c 的类型和 b 类型的关系是什么呢？在第一次调用 russell_paradox 函数时，其返回值 b 已经失去类型信息了，而第二次的调用无非是把不知道是什么类型的数据再丢失一次类型，问这两个值的类型关系是什么，是没有意义的。当我们要使用这两个值做任何有类型的的事情时，编译器会立刻阻止我们，除非再一次为它执行定类型。</p><p>我们所说的编程语言，其实是在一个完美的状态机上面运行的，但没有人能够证明这个状态机是完美的，即使 CPU 的电路设计没有问题，因为宇宙射线导致的电位跳动会立即导致我们的程序陷入“不可知”（undefined behavior）的状态，这种“不可知”已经超出了我们的能力范围。</p><p>抛开下层的东西不谈，自举的有趣在于，当我们批评一个自举的论证有错的时候，即是在说它的过程有误、也是在说它的结果和出发点有误。然而指出错误的人本身认可了一套他所指出错误的逻辑（命题）和这些命题所基于的真理。只要从这些命题和真理出发，对自举的论证过程加以修正，就能得到他的语言的边界所指不出错的编程语言和自举过程。</p><p>以上，是我对自举合理性的看法。</p><p>而自然语言的自成性和对不合理过程的论证，似乎平滑的多。我们说“所有的天鹅都是白的”，直到某一天飞出了一只黑天鹅，这时候我们就会把事实（facts）改成“天鹅有白的和黑的”，与此相关的命题都跟着修改，这样我们又得到了一个满足自成性的语言。而自然语言的边界甚广，以至于它无时不存在一个修正的状态。</p><p>我们的现实世界就是这样扩张的。</p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.tongmu.me/2021/01/24/russell-paradox-nl-void-any/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Memoria-2020</title>
      <link>https://blog.tongmu.me/2021/01/18/memoria-2020/</link>
      <guid>https://blog.tongmu.me/2021/01/18/memoria-2020/</guid>
      <pubDate>Mon, 18 Jan 2021 09:53:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>因为从去年年底开始到现在都忙的手忙脚乱，这篇回忆录已经拖了快一个月了，但 2020 还是对自己影响很大的一年，很幸运的认清楚了自己未来要的是什么，故提笔。</p><hr><p>这篇文章 delay 很大原因是参加了 Hackathon。九月中，我转到事务组一段时间后，VLDB 2020 召开了，mentor 把 Proceedings 上一篇讲确定性事务的论文丢给了我。我在对 2pc 理解还不够深刻、对 TiDB 分布式事务实现还不够了解、没听过什么是确定性数据库的情况下囫囵吞枣的读了这篇论文，也成了我了解确定性数据库的入口（对，我事前居然没了解过 Calvin！）。时间推进到十二月初，在学校和导师沟通的过程中发现我原本在研究的基于依赖关系事务模型的测试方法并不能被非数据库方向的答辩评委所认同，于是我想起了这篇文章，恰巧今年的 TiDB Hackathon 进行的比较晚，就打算拿这个 idea 来参赛。好在我的队友和导师非常的厉害，我像海沃德一样提出天真的想法，他们像维克斯一样指出其中的问题，并加以修正。最后这辆确定性事务的车开起来了，一个新的事务模型，影响大到没人敢想象合并到代码库里面去的样子。和论文不同的是，我们的实现需要考虑和现有架构的融合，是一个痛苦且有趣的过程！越是想破脑袋搜刮方案，渴望找出新的解决方式，就越是觉得 2pc 固若金汤、无懈可击，最后是在 Calvin 上找到了 checkpoint 的思路，虽然不知道靠不靠谱，先做一把实验再说。</p><p>印象中每次参加 Hackathon 都会肝到四五点，怀疑人生，这次即使是在有了完整的规划的情况下，还是因为改事务影响的东西太多而爆炸肝。为了跑起来 tpcc，修到半夜，最后又在调优上花费了大量的时间。作为比赛的反思是不应该死磕 tpcc 的，他虽然很重要，但太难了！</p><p>印象最深刻的项目是赛前在推上看到 spdk 的结果 1.8-10x qps，感到相当震惊，我以为这和 utp 一样简直是对其他提升性能工作的降维打击，并且其作者有相当丰富的 kernel 开发经验。IMO, that’s what true hackers do.</p><p>但这终究是比赛，而非学术会议，good idea, implementation, story 缺一不可，我们组的确定性事务和 spdk 一样走了学术派路线。嘛，反正自己玩开心了 lol。</p><hr><p>前些日子和同学一起看了“心灵奇旅”，我个人非常喜欢这个电影的风格，主流的西方文学、影视作品都倾向于写实风格，比如复仇者联盟，通过具像的画面和特效来传达感情。但我更喜欢刘易斯的那种《爱丽丝梦游仙境》的作品，我们在艺术创作中为什么要遵循逻辑呢？我们总是假设自己能了解到真实的东西，而真正的真实是基于所见之物的推理，前者是可以突破的，而后者不行。</p><p>我喜欢这部作品的另一个原因来自与我所崇拜的创作者SCA自所写的剧本。</p><center>なぜ大人はお酒を飲むのか？<br>为什么大人喜欢喝酒呢？<br>大人になると悲しいことに、酒を呑まなくては酔へないからである。<br>大人是非常令人悲伤的，不喝酒就无法进入「醉」的状态。<br>子供なら、何も呑まなくても、忽ち遊びに酔つてしまふことができるのだから……。<br>但是小孩子啊，什么都不需要，只是在玩耍的过程中，就能进入「醉」的状态了...</center><p>电影在这一点上刻画的很好，22 从刚来到世界的迷茫，变化成好奇，任何事情对于 22 来说都是有趣新鲜的，看到汽车觉得“那么大的东西居然会动”，吃批萨会发现“原来有这么好吃的东西”。而很多大人，甚至会拿“不就是汽车”、“不就是批萨”来鄙视他人，这是何等的恶劣和悲伤。</p><p>我对这部电影喜欢的地方也正是我觉得他所刻画不够的地方，简而言之是对 22 在地球的心路历程的变化不够，以及 Joe 的表现未能体现出这一点反差，童年的美在于未知和无限的新奇。我不喜欢在欣赏一部作品的时候从电影制作的视角去看他，这里所说的仅仅是我作为一位观众的意见。</p><hr><p>今年做的一个很重要的决定是 dive into database，我对 CS 的学习过程是自顶向下的一条扭曲的路线，不停的否定自己的认知。和我的天才同事们不同，我没有打过 OI/ACM，在代码能力的起点上有着很大的差距，入门是从前端开发学起的，相比于如何写代码，我更懂如何做产品。相比之下，我比较随遇而安，在来 p 社实习之前，从来没有把数据库开发作为自己的职业选项之一，对数据库没有特殊的兴趣，但是我确实觉得研究数据库的过程非常有趣。在校招的季节，1、我面临两个选择，刷题面试光撒网，2、dive into database。我确信，以我的智商做不到在收获一堆令人羡慕的 offer 的同时还能学好数据库事务，那个时候家里人和我说「你最重要的事情是面试」，但我还是选择了后者。</p><p>老实的说，我是一个不擅长表现自己的人，当面试官问我“介绍一下数据库隔离级别的时候”，但凡我对通过读写关系对事务进行描述有一点不了解的时候，我都会老老实实的搬出教科书上古老的“脏读-序列化”的定义；而对于我很清楚的东西，又会略过细节，去讲述最核心的东西。这也直接导致了我参加的为数不多的面试都迅速结束，说到底还是学艺不精（笑。</p><p>面试是为了得到一个理想的岗位，而我现在又正在一个理想的岗位上实习，本着活在当下的想法，在那个所有同学都在刷题面试的时候，我开始 dive into database。半年后的今天，我也不能说我在数据库领域上有了多高明的见解，总结下来有几点小成就：比起去年 hackathon，能听懂的项目变多了不少；看 issue 能找到一个 bug 出在哪里了；看山不是山了。</p><p>因为某位卷王的原因，「失败」成为了我社交圈里的高频词汇，认真的说我没感觉自己有多「失败」，也没有多「成功」，今年还是在一个「差不多」的状态中过去了，能力不足的原因，想做的事情都没有做的很成功，但拥有了不少「失败」的经验。幸运的是，我至今所打过交道的同事都无比的善良，也给予了我数不清的帮助，让一个没怎么做过系统编程的小白入门了数据库开发，我不觉得适应大厂职场那一套是什么了不起的事情。</p><hr><p>前文提到了我懂得如何做产品，在我看来做产品重要的是「侍奉之心」，渴望把最好的东西给使用者，听到使用者的意见，这其中必然会做许多 dirty 的工作。我没有什么大型产品的打造经验，我说的纯属是做 bot 过程中的一些心得，做出来的东西有人喜欢是一件很令人开心的事，由于 p 社的程序员大多有类似代码洁癖的强迫症，所以他们对工具的要求真的很高！以自动 merge 代码的功能为例，要做到几个要求：同 branch 串行，不同 branch 并行；当需要时自动 update branch；随时暂停。</p><p>在参与数据库开发之后，我发现所谓「侍奉之心」是根本不够用，很多时候也不顶用的，要做好数据库内核，唯有走火入魔的痴迷其中与配当天才的智商。对我的能力来说，这是一条困难的路，也是一条需要抛弃许多东西才能够走的动的路。</p><hr><p>暑假时候入坑了 ff14，但是因为性格原因，对于团队配合的游戏难以上手，时刻担心自己的失误会给队友造成困扰，我认为自己游戏水平至少不低，愿意重复挑战高难度的关卡，比如在玩 mhw 的时候，我是在单人摸清楚贝西摩斯的机制之后才和同学一起挑战的，之后 solo clear 了这只建议团队攻略的怪物。ff14 是相当出色的 MMORPG，并没有因为我不喜欢团队游戏就损失所有的游戏乐趣，其中的元素众多，融合的方式之好甚至想让我去补历作的 ff。</p><hr><p>比起下半年的清晰，上半年的经历可能比较迷茫，虽然国内的疫情控制良好，但口罩和严格的管制政策使城市生活更加的压抑与孤独。在工作中无法找准自己的定位，看到身边同事的优秀感觉遥不可及，感到焦虑和疲惫，至此完全抛弃了在学校里觉得自己什么事情都能做、能做好的那些盲目。感谢某位同事和我说的“做数据库其实没那么难，会写代码就行了”，虽然我不认为我的天才同事们仅仅是「会写代码」而已，但我好像也能「会写代码」，事情是从那时候开始变得清晰的。</p><p>暑假的时候，有位学长给我介绍过选调生，当下不是没有心动过，不加班，没有 KPI/OKR，可以享受生活，我 100% 理解为什么那么多人想当公务员——躺在高速发展的列车上享受人生。当然我远没有那位学长那么优秀，甚至没有选调生的报名资格（笑），在之前的研究生阶段就没有考虑过自己还有这条路可以选择。而另一点，想到了当时司法考试的失败，当年没有影响到考研是我的幸运，我考研成功了，但是如今如果再把心思分散到考公上面去，那就不一定有这种幸运了。自然的、理想主义的想法，公务员并非什么高人一等的岗位，也并非除了这一条路我就无法实现自我，倒不如说，在体制内实现自我对我来说更加困难吧。这是这份心动马上就消散的原因。</p><p>我不怎么清高，也不是不知道显示的高低优劣，只是觉得如果所有人都变成哪里钱多哪里能工作轻松就往哪里扎堆，那这样的世界未免太过枯燥。我们所生活的城市，已经接近于艺术的不毛之地，这一行为是在加剧这种现象而已，哪怕有了十分轻松的工作，上班下班十年如一日，这能算「生活」吗？大部分人认为考公就是脱离苦海的现象挺奇怪的。</p><hr><p>最后，给看到这里的你揭晓一个答案，我的网名是 you06，来源于我接触的第一个网络游戏。</p><p><img src="./you06.png" alt="you06"></p><hr><p>年初开完年会回到家之后，疫情就开始了，当很多同学赋闲并享受了可能是成年以后最长的一个假期的同时我在家经历了 remote 工作的一段时间。这一年过的比我想象中要快，我的忙碌也算不得什么真正的忙碌，感谢帮助和关心过我的人，祝你们能完成自己的心愿。</p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.tongmu.me/2021/01/18/memoria-2020/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于「逻辑哲学论」</title>
      <link>https://blog.tongmu.me/2020/12/19/note-on-tractatus-logico-philosophicus/</link>
      <guid>https://blog.tongmu.me/2020/12/19/note-on-tractatus-logico-philosophicus/</guid>
      <pubDate>Sat, 19 Dec 2020 02:15:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>        <div id="aplayer-eiGyfVBQ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-eiGyfVBQ"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Jesu, Joy of Man's Desiring",              author: "Gabor Varga Jazz Trio / Szaniszló Richárd",              url: "https://music.163.com/song/media/outer/url?id=1803632058.mp3",              pic: "https://p1.music.126.net/U67QMLrtvwLuhlvyRr_Uhg==/109951165533959970.jpg?param=130y130",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>坦言之，我读「逻辑哲学论」是因为玩了SCA-自老师的作品，而且我也没读懂这本书，但里面所描述的一些关于数学方法以及世界的哲学认知有打动我的地方，所以不妨在这里瞎说几句。「逻辑哲学论」的取命来自于斯宾诺莎的「神学政治论」，希望能够一读。</p><center>人所知道的而非仅由喧嚣扰攘中听来的一切，都可以用三个词说出来。<br>——屈伦伯格尔</center><p>即使是囫囵吞枣地读完全书之后，也是一定可以理解这句话的。关于前几章晦涩难懂的描述，不妨跳过，我认真读了，但是没有什么收获。</p><p>维氏在本书里所提到的许多关于符号、事实、逻辑图像、命题的描述与我们今日所采用的描述已有一定的区别，时而令我觉得眼熟，但尝试去认真理解他们的时候又感受到明显的障碍。但毫无疑问，维氏对于数学的描述是现代的，就像我们所开玩笑说的“1+2 = 2+1 不是因为他们都等于 3，而是因为这是一个阿贝尔群”一样，维氏对数学的描述以至于到哲学论的描述都秉持了这一谨慎的态度。</p><p>「5.6　　 我的语言的界限 意味我的世界的界限。」说出了十分可惜的事，我们不能用语言来描述我的世界，它是有界限的，如果我所说的实体不能被正确的指代，或是我所说的逻辑符号不能被理解成唯一的含义，那语言在这时候就无法描述世界。语言本身也是世界的一部分。如果想要完整的描述世界，那么只能够从世界之外观察。</p><p>「6.341　　 （正如借助数字系统我们能够写出任何数目一样，借助力学系统我们也应该能够写出任何物理学命题。）」，「6.342　　 …同样，世界可以用牛顿力学来描述，这关于世界并无所说；…」，玩过「すばひび」的朋友们还记得「空气力学」嘛？世界当然也可以用「空气力学」来描述，只是可能因为几乎没有付合规律性的命题，所以不能说出来而已。维氏说现代人之于自然规律，就像古代人之于神一样，他们都是正确切错误的，因为他们都不符合「因果律」，那么关于他们是否一定会发生这个命题就是不可说的。从语言的认知上来说，「5.621　 世界和人生是一回事」，但是当我们想要讨论其这些不可知的事情的时候，又会发现「6.373　世界是独立于我的意志的。」，换句话说，人生是独立于我的意志的，我无法把他说的明明白白的。「6.43　 幸福者的世界不同于不幸者的世界。」是因为他们的世界的界限不同，用数学系统描述世界的人和用力学系统描述世界的人和用「空气力学」系统描述世界的人，他们的世界的界限也不同。</p><p>「7　　　对于不可说的东西我们必须保持沉默。」第七章以一句话结尾，回答了卷首的格言，人所知道的都是能够被用三个词说明白的，而其他的，我们不能够说的明白，我们需要对此保持沉默。很有意思的一点是，本书在哲学上的论证，是想要说，当我们想要脱离自然规律讨论形而上学的东西的时候，就已经超过了说话者的世界的界限，我们应该对说话者说“快沉默吧！”。</p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.tongmu.me/2020/12/19/note-on-tractatus-logico-philosophicus/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TiUP 使用指南</title>
      <link>https://blog.tongmu.me/2020/11/02/tiup-guide/</link>
      <guid>https://blog.tongmu.me/2020/11/02/tiup-guide/</guid>
      <pubDate>Mon, 02 Nov 2020 21:24:32 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>TiUP</code>是一个<code>TiDB</code>的组件管理工具，我本人的使用体验是（在会用的情况下）非常好用，可惜有的时候不会用，这里记载一些自己踩过的坑以及常用的使用方法，意在弥补文档不全面的情况。</p><h2 id="TiDB-Playground"><a href="#TiDB-Playground" class="headerlink" title="TiDB Playground"></a>TiDB Playground</h2><p>回想起当时做小作业的时候，为了起一个<code>TiDB</code>集群，不管是用<code>TiDB</code>的<code>Ansible</code>还是<code>Docker Compose</code>都对我这个萌新（和低配 Mac）非常不友好，直到<code>TiUP</code>问世。</p><p>从<code>TiUP Playground</code>最基本的使用方式说起，不加任何参数启动<code>Playground</code>，会看到以下结果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">» tiup playground</span><br><span class="line">...</span><br><span class="line">Start tiflash instance</span><br><span class="line">...</span><br><span class="line">CLUSTER START SUCCESSFULLY, Enjoy it ^-^</span><br><span class="line">To connect TiDB: mysql --host 127.0.0.1 --port 37257 -u root</span><br><span class="line">To view the dashboard: http://127.0.0.1:2379/dashboard</span><br><span class="line">To view the Prometheus: http://127.0.0.1:9090</span><br><span class="line">To view the Grafana: http://127.0.0.1:3000</span><br></pre></td></tr></table></figure><p>其实我起<code>Playground</code>大部分时候只是想做一些功能性测试，并不希望看到<code>Prometheus</code>和<code>Grafana</code>以及<code>tiflash</code>，所以我常用的命令是：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tiup playground --tiflash=0 --monitor=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在使用<code>Ctrl + C</code>发送<code>SIGINT</code>时，会看到<code>TiUP</code>进程卡在了这样一个状态，正在等待某某某进程退出，然后下一个，到全部退出可能要花费十多秒的时间，主要是等待<code>TiDB</code>退出的时间特别长，以及<code>TiUP</code>会删除掉<code>TiDB</code>集群所生成的文件。使用<code>Ctrl + C</code>发送第二个<code>SIGINT</code>信号会让<code>Playground</code>和它所拉起来的进程强制退出（<code>SIGKILL</code>）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">^CPlayground receive signal:  interrupt</span><br><span class="line">Got signal interrupt (Component: playground ; PID: 6355)</span><br><span class="line">Wait pd(6377) to quit...</span><br><span class="line">pd quit</span><br><span class="line">Wait tikv(6383) to quit...</span><br><span class="line">tikv quit</span><br><span class="line">Wait tidb(6385) to quit...</span><br><span class="line">tidb quit</span><br></pre></td></tr></table></figure><h2 id="TiDB-Cluster"><a href="#TiDB-Cluster" class="headerlink" title="TiDB Cluster"></a>TiDB Cluster</h2><p>如果要起一个生产环境用的集群，需要使用<code>TiDB Cluster</code>这个组件，当然我不是专业的DBA，也没有在生产环境实践过，这里所说的，是一个程序员启动一个开发用集群的实践。主要流程请参考<a href="https://docs.pingcap.com/zh/tidb/stable/tiup-cluster">官方文档</a>，本文只写自己遇到的坑。</p><h3 id="1-编辑拓扑文件"><a href="#1-编辑拓扑文件" class="headerlink" title="1. 编辑拓扑文件"></a>1. 编辑拓扑文件</h3><p>最初写<code>TiUP</code>的拓扑文件，因为找不到文档，所以对着代码里的结构体定义在写，写的十分痛苦，建议直接抄 example： <a href="https://github.com/pingcap/tiup/blob/master/examples/topology.example.yaml">https://github.com/pingcap/tiup/blob/master/examples/topology.example.yaml</a> 。</p><h3 id="2-部署启动集群"><a href="#2-部署启动集群" class="headerlink" title="2. 部署启动集群"></a>2. 部署启动集群</h3><p>认真看官方文档的小伙伴，应该不用来这里抄命令了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">» tiup cluster deploy ntr nightly topology.yaml</span><br><span class="line">» tiup cluster list</span><br><span class="line">Name          User  Version  Path                                                      PrivateKey</span><br><span class="line">----          ----  -------  ----                                                      ----------</span><br><span class="line">ntr           tidb  nightly  /home/tidb/.tiup/storage/cluster/clusters/ntr             ...</span><br><span class="line">» tiup cluster start ntr</span><br></pre></td></tr></table></figure><h3 id="3-patch"><a href="#3-patch" class="headerlink" title="3. patch"></a>3. patch</h3><p>有的时候想要测试自己编译的组件，<code>TiUP</code>提供了<code>patch</code>命令，但是大家非常容易翻一个常见错误，以<code>TiDB</code>为例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">» tiup cluster patch ntr tidb-server -R tidb</span><br><span class="line">...</span><br><span class="line">Starting component `cluster`: /home/tidb/.tiup/components/cluster/v1.2.0/tiup-cluster patch ntr tidb-server -R tidb</span><br><span class="line"></span><br><span class="line">Error: <span class="built_in">exit</span> status 2</span><br><span class="line"></span><br><span class="line">Verbose debug logs has been written to /home/tidb/tiup/logs/tiup-cluster-debug-2077-11-04-05-14-00.log.</span><br><span class="line">Error: run `/home/tidb/.tiup/components/cluster/v1.2.0/tiup-cluster` (wd:/home/you06/.tiup/data/SFC8xCY) failed: <span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>因为根据 DBA 的使用习惯，一般想要直接使用下载下来的 tar 包，所以 patch 命令所指定的文件也需要是一个 tar 包（快兼容一下啊(╯‵□′)╯︵┻━┻）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar czf tidb-server.tar.gz tidb-server</span><br><span class="line">tiup cluster patch ntr tidb-server -R tidb</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://blog.tongmu.me/2020/11/02/tiup-guide/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>yasp 开发日记【2】</title>
      <link>https://blog.tongmu.me/2020/08/17/yasp-diary-2/</link>
      <guid>https://blog.tongmu.me/2020/08/17/yasp-diary-2/</guid>
      <pubDate>Mon, 17 Aug 2020 14:25:50 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="/2020/06/01/yasp-diary-1/">yasp 开发日记【1】</a>提到了我遇到关键字 ambiguous 的问题，这个问题在<code>lalrpop</code>的<a href="https://lalrpop.github.io/lalrpop/lexer_tutorial/001_lexer_gen.html#precedence-of-fixed-strings">Precedence of fixed strings</a>章节也有所描述，并提供了解决方法。</p><p><code>SQL</code>语言是一个流行的关键字大小写不敏感的语言，例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> uta <span class="keyword">from</span> sakura;</span><br><span class="line"><span class="keyword">SeLecT</span> uta <span class="keyword">fRom</span> sakura;</span><br></pre></td></tr></table></figure><p>这两句<code>SQL</code>的语义实际上是一样的，但是如果我们这么写一个简陋的<code>lexer</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Name: String = r&quot;\w+&quot; =&gt; &lt;&gt;.into();</span><br><span class="line">SELECT: &amp;&#x27;input str = &quot;select&quot; =&gt; &lt;&gt;;</span><br><span class="line">FROM: &amp;&#x27;input str = &quot;from&quot; =&gt; &lt;&gt;;</span><br><span class="line">pub Expr: Expr = &#123;</span><br><span class="line">    SELECT &lt;field: Name&gt; FROM &lt;table: Name&gt; =&gt; Expr::Select(SelectNode&#123;</span><br><span class="line">        field,</span><br><span class="line">        table,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么这个<code>lexer</code>对于<code>select uta from sakura</code>来说没问题；但是对于<code>SeLecT uta fRom sakura</code>来说，<code>SeLecT</code>和<code>fRom</code>不能够被匹配成关键字。</p><p>需要注意的另一点是，根据<a href="https://lalrpop.github.io/lalrpop/lexer_tutorial/001_lexer_gen.html#precedence-of-fixed-strings">Precedence of fixed strings</a>的描述，固定的字符串拥有比正则表达式更高的匹配优先级，所以这个词法分析器不存在歧义。</p><p>为了匹配<code>SeLecT</code>和<code>fRom</code>关键字，我们将<code>lexer</code>改成:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Name: String = r&quot;\w+&quot; =&gt; &lt;&gt;.into();</span><br><span class="line">SELECT: &amp;&#x27;input str = r&quot;(?i)select&quot; =&gt; &lt;&gt;;</span><br><span class="line">FROM: &amp;&#x27;input str = r&quot;(?i)from&quot; =&gt; &lt;&gt;;</span><br><span class="line">pub Expr: Expr = &#123;</span><br><span class="line">    SELECT &lt;field: Name&gt; FROM &lt;table: Name&gt; =&gt; Expr::Select(SelectNode&#123;</span><br><span class="line">        field,</span><br><span class="line">        table,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时，<code>lalrpop</code>会认为我们所描述的语法存在歧义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: ambiguity detected between the terminal `r#&quot;\\w+&quot;#` and the terminal `r#&quot;(?i)from&quot;#`</span><br></pre></td></tr></table></figure><p>好吧，<code>lalrpop</code>不会处理推断多个正则表达式之间的优先级，相应的，文档中也给出了处理方式——预处理输入。</p><p>需要这样修改<code>lexer</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">match &#123;</span><br><span class="line">    r&quot;(?i)select&quot; =&gt; &quot;SELECT&quot;,</span><br><span class="line">    r&quot;(?i)from&quot; =&gt; &quot;FROM&quot;,</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    _</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Name: String = r&quot;\w+&quot; =&gt; &lt;&gt;.into();</span><br><span class="line">SELECT: &amp;&#x27;input str = &quot;SELECT&quot; =&gt; &lt;&gt;;</span><br><span class="line">FROM: &amp;&#x27;input str = &quot;FROM&quot; =&gt; &lt;&gt;;</span><br><span class="line">pub Expr: Expr = &#123;</span><br><span class="line">    SELECT &lt;field: Name&gt; FROM &lt;table: Name&gt; =&gt; Expr::Select(SelectNode&#123;</span><br><span class="line">        field,</span><br><span class="line">        table,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>虽然<code>lalrpop</code>不会自动推断多个正则表达式之间的优先级，但是在<code>match else</code>中，我们可以手动指定这些<code>token</code>的优先级。另外，这个写法也将关键词罗列在了一起，让代码可读性变的更强。</p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.tongmu.me/2020/08/17/yasp-diary-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TiDB 事务原理 - 点查询</title>
      <link>https://blog.tongmu.me/2020/07/29/tidb-txn-point-get/</link>
      <guid>https://blog.tongmu.me/2020/07/29/tidb-txn-point-get/</guid>
      <pubDate>Wed, 29 Jul 2020 07:39:45 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>近来在阅读<code>TiDB</code>事务方面的代码，所以写一些学习记录。</p><p>点查询指的是获取单条数据的<code>SQL</code>语句，相比于范围查询，点查询的执行过程要简单很多，原因有以下几点：</p><ul><li>点查询的结果只可能在一个 region 内</li><li>点查询只会涉及到一个 key 上的锁处理</li></ul><p>将<code>TiDB</code>测试用例中的点查询稍作修改：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use test;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> point (id <span class="type">int</span> <span class="keyword">primary</span> key, c <span class="type">int</span>, d <span class="type">varchar</span>(<span class="number">10</span>), <span class="keyword">unique</span> c_d (c, d));</span><br><span class="line"><span class="keyword">insert</span> point <span class="keyword">values</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> point <span class="keyword">values</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> point <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> point <span class="keyword">where</span> c <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> d <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在完成建表和插入数据后，我们进行了两个查询，其中第一条<code>SQL</code>可以通过在主键<code>id</code>的等于条件查询条件知道最多有一条结果；第二条<code>SQL</code>可以通过<code>c</code>和<code>d</code>的等于查询条件结合<code>unique c_d (c, d)</code>的约束知道最多有一条结果。然而在实际执行时，还需要考虑许多情况。</p><h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><h3 id="构造-key"><a href="#构造-key" class="headerlink" title="构造 key"></a>构造 key</h3><p>我们先在不考虑优化的情况下谈论执行过程（即严格按照<code>SI</code>的含义，对点查询取一个单独的快照来执行），<code>TiKV</code>是一个分布式<code>KV</code>数据库，即想要在<code>TiKV</code>中查出值来，首先需要有一个<code>key</code>，所以要先在<code>TiDB</code>里面把<code>key</code>给构造出来。</p><p>这里以<code>point(id int primary key, c int, d varchar(10), unique c_d (c, d))</code>表为例，有两种构造出点查询的方式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> point <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">key:</span><br><span class="line">  <span class="number">74</span> <span class="number">800000000000002</span>d <span class="number">5</span>f72  <span class="number">8000000000000001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> point <span class="keyword">where</span> c <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> d <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">key:</span><br><span class="line">  <span class="number">74</span> <span class="number">800000000000002</span>d <span class="number">5</span>f69  <span class="number">8000000000000001</span> <span class="number">038000000000000002</span> <span class="number">016200000000000000</span>f8</span><br><span class="line">  <span class="number">74</span> <span class="number">800000000000002</span>d <span class="number">5</span>f72  <span class="number">8000000000000002</span></span><br></pre></td></tr></table></figure><p>为了分析便利，这里列出了接下来可能会用到的<code>ASCII</code>表的内容。</p><table><thead><tr><th>16进制</th><th>字符</th></tr></thead><tbody><tr><td>0x5f</td><td>_</td></tr><tr><td>0x62</td><td>b</td></tr><tr><td>0x69</td><td>i</td></tr><tr><td>0x72</td><td>r</td></tr><tr><td>0x74</td><td>t</td></tr></tbody></table><p>对于第一条查询，因为<code>point</code>表中的主键字段为<code>id</code>，所以能够直接通过<code>id</code>来构造<code>key</code>；而对于第二条查询，我们只知道<code>c</code>和<code>d</code>的约束条件，需要先通过已知的条件确定主键的值再进行查询。</p><p>我有意的将<code>key</code>拆成了几段来进行分析</p><ul><li><p>第一段<code>74 800000000000002d 5f72</code>和<code>74 800000000000002d 5f69</code></p></li><li><p>第二段<code>8000000000000001</code>和<code>8000000000000001 038000000000000002 016200000000000000 f8</code></p></li></ul><h4 id="第一段"><a href="#第一段" class="headerlink" title="第一段"></a>第一段</h4><p><code>74 800000000000002d 5f72</code>和<code>74 800000000000002d 5f69</code>是两种查询类型，其中还包括了表信息。</p><p>其中<code>800000000000002d</code>代表了表<code>id</code>，用<code>int64</code>来表示，但是在编码的时候把符号位强行置为了1。</p><p>查<code>ASCII</code>表之后，我们可以将这两个<code>key</code>写成<code>t45_r</code>和<code>t45_i</code>，可以参考以下代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// github.com/pingcap/tidb/tablecodec/tablecodec.go</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">tablePrefix     = []<span class="keyword">byte</span>&#123;<span class="string">&#x27;t&#x27;</span>&#125;</span><br><span class="line">recordPrefixSep = []<span class="keyword">byte</span>(<span class="string">&quot;_r&quot;</span>)</span><br><span class="line">indexPrefixSep  = []<span class="keyword">byte</span>(<span class="string">&quot;_i&quot;</span>)</span><br><span class="line">metaPrefix      = []<span class="keyword">byte</span>&#123;<span class="string">&#x27;m&#x27;</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>那么很容易理解，<code>recordPrefixSep</code>是要查询记录，而<code>indexPrefixSep</code>是要查询索引，回到上面，<code>select * from point where c = 2 and d = &#39;b&#39;</code>这条<code>SQL</code>要经过两次查询，第一次通过<code>unique</code>索引查询到主键索引，第二次再通过主键索引查询记录值。</p><h4 id="第二段"><a href="#第二段" class="headerlink" title="第二段"></a>第二段</h4><p>根据刚才的分析，<code>8000000000000001</code>很容易理解，指的就是索引（这里是<code>id</code>列）的值。</p><p><code>8000000000000001 038000000000000002 016200000000000000 f8</code>是一条对索引进行查询的<code>key</code>的值。</p><ul><li><code>8000000000000001</code>代表的是索引的<code>id</code>（即使在一张表内也可能存在多个索引）</li><li><code>038000000000000002</code>中<code>03</code>代表是整数类型，<code>8000000000000002</code>代表查询的值为2</li><li><code>016200000000000000f8</code>中<code>01</code>代表是<code>bytes</code>类型，<code>6200000000000000f8</code>是字符串<code>b</code>编码后的结果，<code>0x62</code>是<code>b</code>，后面一串<code>0</code>是为了对齐，最后的<code>0xf8</code>表示 padding 长度，此处为 7，<code>0xff - 7 = 0xf8</code>，详细的编码方式可以参考 <a href="https://github.com/pingcap/tidb/blob/b16c46dba91eb05b5d60c92d185443ead8f40394/util/codec/bytes.go#L34-L68">TiDB代码</a></li></ul><h3 id="查询-key"><a href="#查询-key" class="headerlink" title="查询 key"></a>查询 key</h3><p>在有了<code>key</code>之后，<code>TiDB</code>会向对应<code>region</code>所在的<code>TiKV leader</code>发出<code>RPC</code>请求，此时，我们的问题变成了如何从一个带有分布式事务的<code>KV</code>存储引擎上查询一个<code>key</code>。</p><p><code>KV</code>存储引擎需要考虑的问题：</p><ul><li>1 如果尝试读取一个正在<code>commit</code>中的<code>key</code>，并且<code>commit ts</code>小于<code>get ts</code>，那么应该读到<code>commit</code>完成之后的值</li><li>2 处理 Internal Read 的情况</li></ul><p><code>TiKV</code>会首先拿取一个<code>snapshot</code>，然后检查这个<code>key</code>上存在的锁，锁信息存在一个叫<code>lock</code>的<code>CF</code>中，如果存在锁，则说明这个值可能有变化，即上面所说的问题1，此时<code>TiKV</code>会将标志位<code>met_newer_ts_data</code>从<code>NotMetYet</code>改为<code>Met</code>，然后执行<code>check_ts_conflict</code>函数。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Checks whether the lock conflicts with the given `ts`. If `ts == TimeStamp::max()`, the primary lock will be ignored.</span></span><br><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">check_ts_conflict</span></span>(<span class="keyword">self</span>, key: &amp;Key, ts: TimeStamp, bypass_locks: &amp;TsSet) -&gt; <span class="built_in">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="comment">// 1. 锁的 ts 大于 snapshot 的 ts，显然应该忽略这把锁</span></span><br><span class="line">    <span class="comment">// 2. 锁有四种类型 Put, Delete, Lock, Pessimistic，后两种和数据无关，忽略</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.ts &gt; ts</span><br><span class="line">        || <span class="keyword">self</span>.lock_type == LockType::Lock</span><br><span class="line">        || <span class="keyword">self</span>.lock_type == LockType::Pessimistic</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Ignore lock when lock.ts &gt; ts or lock&#x27;s type is Lock or Pessimistic</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">Ok</span>(());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Put 或 Delete 记录的最小 commit ts 大于 snapshot 的 ts，snapshot 读不到这个数据更新</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.min_commit_ts &gt; ts &#123;</span><br><span class="line">        <span class="comment">// Ignore lock when min_commit_ts &gt; ts</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">Ok</span>(());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是一个 internal read，直接读取未 commit 的数据即可，例</span></span><br><span class="line">    <span class="comment">// begin</span></span><br><span class="line">    <span class="comment">// write(x, 1)</span></span><br><span class="line">    <span class="comment">// read(x)</span></span><br><span class="line">    <span class="keyword">if</span> bypass_locks.contains(<span class="keyword">self</span>.ts) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">Ok</span>(());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> raw_key = key.to_raw()?;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为什么可以忽略这把锁，这里我也没看懂...</span></span><br><span class="line">    <span class="keyword">if</span> ts == TimeStamp::max() &amp;&amp; raw_key == <span class="keyword">self</span>.primary &#123;</span><br><span class="line">        <span class="comment">// When `ts == TimeStamp::max()` (which means to get latest committed version for</span></span><br><span class="line">        <span class="comment">// primary key), and current key is the primary key, we ignore this lock.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">Ok</span>(());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 至此，锁生效了，这里的 Err 会直接返回给发送 get rpc 请求的客户端（TiDB）</span></span><br><span class="line">    <span class="comment">// 这个查询会在 TiDB 里面被重试</span></span><br><span class="line">    <span class="comment">// There is a pending lock. Client should wait or clean it.</span></span><br><span class="line">    <span class="literal">Err</span>(Error::from(ErrorInner::KeyIsLocked(</span><br><span class="line">        <span class="keyword">self</span>.into_lock_info(raw_key),</span><br><span class="line">    )))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过锁检查后，<code>met_newer_ts_data</code>这个标志位可能会有两种状态，<code>NotMetYet</code>和<code>Met</code>。</p><p>对于<code>NotMetYet</code>的情况，没有遇到这个<code>key</code>上存在的锁，所以只需要拿取最新数据就可以了。取数据的过程涉及到<code>MVCC</code>的操作，这里不会对其详细介绍（其实我也不大懂），可以参考<a href="https://pingcap.com/blog-cn/tikv-source-code-reading-13/">TiKV 源码解析系列文章（十三）MVCC 数据读取</a>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> use_near_seek = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> seek_key = user_key.clone();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">self</span>.met_newer_ts_data == NewerTsCheckState::NotMetYet &#123;</span><br><span class="line">    <span class="comment">// 将 ts 置为 max，找到 lower_bound 的位置</span></span><br><span class="line">    <span class="comment">// 如果找不到，说明 key 不存在</span></span><br><span class="line">    seek_key = seek_key.append_ts(TimeStamp::max());</span><br><span class="line">    <span class="keyword">if</span> !<span class="keyword">self</span></span><br><span class="line">        .write_cursor</span><br><span class="line">        .seek(&amp;seek_key, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.statistics.write)?</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">Ok</span>(<span class="literal">None</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把刚才写入的 TimeStamp::max() 删掉，在 lower_bound 附近寻找目标版本</span></span><br><span class="line">    seek_key = seek_key.truncate_ts()?;</span><br><span class="line">    use_near_seek = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> cursor_key = <span class="keyword">self</span>.write_cursor.key(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>.statistics.write);</span><br><span class="line">    <span class="comment">// lower_bound 的 key 不等于要查询的 user_key（为什么没有在上面就返回 Ok(None) 0.0），感觉这里理解有误</span></span><br><span class="line">    <span class="keyword">if</span> !Key::is_user_key_eq(cursor_key, user_key.as_encoded().as_slice()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">Ok</span>(<span class="literal">None</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遇到了新数据！</span></span><br><span class="line">    <span class="keyword">if</span> Key::decode_ts_from(cursor_key)? &gt; <span class="keyword">self</span>.ts &#123;</span><br><span class="line">        <span class="keyword">self</span>.met_newer_ts_data = NewerTsCheckState::Met;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">seek_key = seek_key.append_ts(<span class="keyword">self</span>.ts);</span><br><span class="line"><span class="comment">// 刚才用过 seek 的情况只需要 near_seek 就可以了</span></span><br><span class="line"><span class="keyword">let</span> data_found = <span class="keyword">if</span> use_near_seek &#123;</span><br><span class="line">    <span class="keyword">self</span>.write_cursor</span><br><span class="line">        .near_seek(&amp;seek_key, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.statistics.write)?</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">self</span>.write_cursor</span><br><span class="line">        .seek(&amp;seek_key, &amp;<span class="keyword">mut</span> <span class="keyword">self</span>.statistics.write)?</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> !data_found &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">Ok</span>(<span class="literal">None</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 statistics.write，直到遇到 Put 和 Delete 记录，逻辑真的没看懂...</span></span><br><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="comment">// We may seek to another key. In this case, it means we cannot find the specified key.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> cursor_key = <span class="keyword">self</span>.write_cursor.key(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>.statistics.write);</span><br><span class="line">        <span class="keyword">if</span> !Key::is_user_key_eq(cursor_key, user_key.as_encoded().as_slice()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">Ok</span>(<span class="literal">None</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.statistics.write.processed += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> write = WriteRef::parse(<span class="keyword">self</span>.write_cursor.value(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>.statistics.write))?;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> write.write_type &#123;</span><br><span class="line">        WriteType::Put =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.omit_value &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">Ok</span>(<span class="literal">Some</span>(<span class="built_in">vec!</span>[]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 小于 64 bytes 的数据会被直接放在 write CF 里</span></span><br><span class="line">            <span class="comment">// 否则需要去 default CF 里获取</span></span><br><span class="line">            <span class="keyword">match</span> write.short_value &#123;</span><br><span class="line">                <span class="literal">Some</span>(value) =&gt; &#123;</span><br><span class="line">                    <span class="comment">// Value is carried in `write`.</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">Ok</span>(<span class="literal">Some</span>(value.to_vec()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                    <span class="keyword">let</span> start_ts = write.start_ts;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">Ok</span>(<span class="literal">Some</span>(<span class="keyword">self</span>.load_data_from_default_cf(start_ts, user_key)?));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 数据已被删除</span></span><br><span class="line">        WriteType::Delete =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">Ok</span>(<span class="literal">None</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        WriteType::Lock | WriteType::Rollback =&gt; &#123;</span><br><span class="line">            <span class="comment">// Continue iterate next `write`.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !<span class="keyword">self</span>.write_cursor.next(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>.statistics.write) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">Ok</span>(<span class="literal">None</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>emm 这 blog 写着写着发现挖了好多坑，搞懂之后一定填…</p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.tongmu.me/2020/07/29/tidb-txn-point-get/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2020 年中游戏评价</title>
      <link>https://blog.tongmu.me/2020/07/21/2020-mid-games-review/</link>
      <guid>https://blog.tongmu.me/2020/07/21/2020-mid-games-review/</guid>
      <pubDate>Tue, 21 Jul 2020 12:40:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我玩过的游戏"><a href="#我玩过的游戏" class="headerlink" title="我玩过的游戏"></a>我玩过的游戏</h2><ul><li><p>サクラノ詩 －櫻の森の上を舞う－</p></li><li><p>ポケットモンスター ソード</p></li><li><p>十三機兵防衛圏</p></li><li><p>CROSS†CHANNEL</p></li><li><p>Ever17 -the out of infinity-</p></li><li><p>美少女万華鏡 -理と迷宮の少女-</p></li><li><p>ATRI -My Dear Moments-</p></li></ul><h2 id="我在玩的游戏"><a href="#我在玩的游戏" class="headerlink" title="我在玩的游戏"></a>我在玩的游戏</h2><ul><li><p>ファイナルファンタジーⅩⅣ</p></li><li><p>PERSONA5 SCRAMBLE The Phantom Strikers</p></li><li><p>きっと、澄みわたる朝色よりも、</p></li></ul><h2 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h2><p>今年玩的游戏不算多也不算少，虽然上半年工作繁忙，还是抽了些时间来摸鱼，但整体游戏质量都不错。</p><h3 id="神作（需要珍惜，玩一部少一部）"><a href="#神作（需要珍惜，玩一部少一部）" class="headerlink" title="神作（需要珍惜，玩一部少一部）"></a>神作（需要珍惜，玩一部少一部）</h3><ul><li>サクラノ詩 －櫻の森の上を舞う－</li></ul><p>SCA-自老师（下称扶她自）时隔多年推出的与前作（素晴日）风格截然不同的纯爱作品，适合一个人在深夜慢慢享受，叙事节奏很慢，但是剧情设计非常巧妙。本作艺术气息浓厚，充满着作者对于艺术见解的“私货”，其中扶她自将艺术和青春恋爱故事结合起来的手段非常高明。</p><p>在一个恋爱故事中，将所有的角色写活是件很难的事（写成白色相簿1/2那样免不了带来一片争议），而女主傻白甜或者写成姬野家的女人也不大能成为神作。樱之诗是一部入戏很深的作品，从雫线揭露历史事件开始到真结局，前面单调的剧情都变成了感动，每个角色对于艺术的追求不同，演变出了这个故事。</p><p>松本文纪的音乐从来不令人失望，素晴日偏冷，樱之诗偏暖，奔着音乐去玩也是可以的。</p><p>最后一个小八卦，御桜稟的生日和狗神煌在同一天（5月14日），这部作品可能是扶她自写给狗神煌的情书也说不定…</p><ul><li>Ever17 -the out of infinity-</li></ul><p>凡人想象力之极限，没有一句废话的作品。“没玩完等于没玩”的评价也很符合这部作品，前篇的剧情已经很强，但揭露结局时候的震撼远超前篇，所有的前奏都是为了 true end 做准备，没有缺点的作品。</p><p>游玩可以看不剧透攻略，不要和群友讨论，一句剧透就能让这部作品索然无味。</p><details><summary>以下剧透</summary><p>本作把障眼法运用到了极致，先前玩过素晴日，我以为少年和武视点只是观看视角不同所带来的差异，沙罗和可可像是若槻姐妹般的幻视区别。</p><p>八百比丘尼的故事给我的印象最深，初玩到这段的时候以为就是一些无所谓的剧情，打完之后恍然大悟。</p><p>可可所看见的第三视点带来了不少悬疑元素，配合那个跳动的生命数量，前期想破脑袋。</p><p>每条线都带来了不少情报，虽然是分支线路，但是结局给人的感觉又像是单线一样，这些不同时间轴的分支所带来的情报拼凑在一起，完成了一块立体的拼图。</p></details><h3 id="佳作"><a href="#佳作" class="headerlink" title="佳作"></a>佳作</h3><ul><li>十三機兵防衛圏</li></ul><p>算不上神作，但绝对值得一玩的作品。虽然“拳打石头门，脚踢 E17”的说法过于夸张，但2019年还能推出这种大胆的题材十分了不起。</p><p>战斗重复度过高，打多了比较精污，但其中第三大关关底 boss 战的音乐演绎十分出彩，一边听着少女的歌声一边操作机甲，这就是男人的浪漫啊！</p><p>建议一口气打掉，因为有十三个主角还打乱了时间线，前期会弄不清谁是谁，长时间不玩的话每次回去玩的时候也会比较懵。</p><p>美术风格可以给满分，暗黄的画风带给人上世纪末、本世纪初的街道的感觉，是最初我看上这个游戏的原因之一。</p><p>有华哥。</p><ul><li>CROSS†CHANNEL</li></ul><p>口三才对孤独做出解释的作品，剧情过半就知道结局，但也只能无奈看着事情如此进展，打完之后很空虚。</p><p>没有太多猎奇和电波，想要表达的东西非常单纯，游戏前期比较冗长，但也绝对值得打完之后给自己的那一拳。</p><p>这部作品在深夜一个人打完多少会有些同感吧，愿你能够享受孤独。</p><ul><li>美少女万華鏡 -理と迷宮の少女-</li></ul><p>前四部在我心中的排名是 3 &gt; 2 &gt; 1 = 4 左右，本作收官之作的价值大于其本身的作品水平。可以说是前几作铺垫的好（你管那个叫铺垫？）才造就了镜5的感动（虽然这个感动都被后期剧情给艹飞了）。</p><p>但无论如何，这是我的青春，刚接触这系列作品的适合还只出到2，镜4是我打完的第一部生肉作品。镜系列完结了，青春陨落了。</p><ul><li>きっと、澄みわたる朝色よりも、</li></ul><p>我玩这部游戏的战线拉得很长，总是没事干了突然想到这部游戏我还没打完，于是接着打。回想起来，这个游戏所设定出的场景非常罕见，和樱之诗一样，也是属于很安静的讲故事，同时音乐又给游戏带来加成，属于观感很棒的游戏。</p><p>另外本作的角色取命非常有意思，举个例子，肆则家的两姐妹，肆则家在游戏里的设定是以规则去运营医学的家族。</p><ul><li><p>肆则澄佳 四则乘加</p></li><li><p>肆则楚玪 四则除减</p></li></ul><p>这是一部单线游戏，不需要花心思把每条线都做得巧妙绝伦，前期的支线都是为了最后的主线服务，治好了我的选择困难症。</p><ul><li>ODIN SPHERE LEIFTHRASIR</li></ul><p>奥丁领域，和十三機兵防衛圏一样是香草社的作品，和十三機兵一样，存在战斗重复度过高的情况（可能是本肥宅不喜欢战斗），目前进度不多。优点是画风很淳朴，把北欧神话和童话结合起来，这一点的体验非常棒。</p>]]></content:encoded>
      
      
      
      <category domain="https://blog.tongmu.me/tags/%E6%B8%B8%E6%88%8F/">游戏</category>
      
      
      <comments>https://blog.tongmu.me/2020/07/21/2020-mid-games-review/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>yasp 开发日记【1】</title>
      <link>https://blog.tongmu.me/2020/06/01/yasp-diary-1/</link>
      <guid>https://blog.tongmu.me/2020/06/01/yasp-diary-1/</guid>
      <pubDate>Mon, 01 Jun 2020 23:23:23 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/Airyworks/yasp"><code>yasp</code></a>(Yet Another SQL Parser) 是一个<code>SQL</code>解析工具，此前我用<a href="https://github.com/pingcap/parser"><code>TiDB Parser</code></a> 用得很爽，但是用<code>TiDB Parser</code>写测试工具存在一个固有问题是测试工具嫖了被测对象的代码是不合理的。本着严谨科学（和主要是喜欢造轮子）的态度，开了个<code>SQL Parser</code>（下简称<code>Parser</code>）的坑。</p><p>起初我打算用<a href="https://github.com/lalrpop/lalrpop"><code>lalrpop</code></a>一把梭，词法语法一起做了，但是这玩意的词法分析有个小坑是正则匹配不能冲突，以<code>SELECT</code>语句的解析为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Comma&lt;T&gt;: Vec&lt;T&gt; = &#123;</span><br><span class="line">    &lt;mut v:(&lt;T&gt; &quot;,&quot;)*&gt; &lt;e:T?&gt; =&gt; match e &#123;</span><br><span class="line">        None=&gt; v,</span><br><span class="line">        Some(e) =&gt; &#123;</span><br><span class="line">            v.push(e);</span><br><span class="line">            v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Name: CIStr = r&quot;[0-9a-zA-Z_]+&quot; =&gt; &lt;&gt;.into();</span><br><span class="line"></span><br><span class="line">pub Fields = Comma&lt;Field&gt;;</span><br><span class="line"></span><br><span class="line">pub Field: Field = &#123;</span><br><span class="line">    &quot;*&quot; =&gt; Field::new_all(),</span><br><span class="line">    Name =&gt; Field::new_column(&lt;&gt;),</span><br><span class="line">    &lt;table: Name&gt;&quot;.&quot;&lt;column: Name&gt; =&gt; Field::new_column(column).with_table(table),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ResultTable = Name;</span><br><span class="line"></span><br><span class="line">pub Expr: Expr = &#123;</span><br><span class="line">    &quot;select&quot; &lt;fields: Fields&gt; &quot;from&quot; &lt;result_table: ResultTable&gt; =&gt; Expr::Select(SelectNode&#123;</span><br><span class="line">        fields,</span><br><span class="line">        result_table,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><details><summary>完整代码</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">use crate::ast::&#123;</span><br><span class="line">    dml::*,</span><br><span class="line">    expr::*,</span><br><span class="line">    model::*</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">grammar;</span><br><span class="line"></span><br><span class="line">Comma&lt;T&gt;: Vec&lt;T&gt; = &#123;</span><br><span class="line">    &lt;mut v:(&lt;T&gt; &quot;,&quot;)*&gt; &lt;e:T?&gt; =&gt; match e &#123;</span><br><span class="line">        None=&gt; v,</span><br><span class="line">        Some(e) =&gt; &#123;</span><br><span class="line">            v.push(e);</span><br><span class="line">            v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Semicolon&lt;T&gt;: Vec&lt;T&gt; = &#123;</span><br><span class="line">    &lt;mut v:(&lt;T&gt; &quot;;&quot;)*&gt; &lt;e:T?&gt; =&gt; match e &#123;</span><br><span class="line">        None=&gt; v,</span><br><span class="line">        Some(e) =&gt; &#123;</span><br><span class="line">            v.push(e);</span><br><span class="line">            v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pub Exprs = Semicolon&lt;Expr&gt;;</span><br><span class="line"></span><br><span class="line">pub Expr: Expr = &#123;</span><br><span class="line">    &quot;select&quot; &lt;fields: Fields&gt; &quot;from&quot; &lt;result_table: ResultTable&gt; =&gt; Expr::Select(SelectNode&#123;</span><br><span class="line">        fields,</span><br><span class="line">        result_table,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Name: CIStr = r&quot;[0-9a-zA-Z_]+&quot; =&gt; &lt;&gt;.into();</span><br><span class="line"></span><br><span class="line">pub Fields = Comma&lt;Field&gt;;</span><br><span class="line"></span><br><span class="line">pub Field: Field = &#123;</span><br><span class="line">    &quot;*&quot; =&gt; Field::new_all(),</span><br><span class="line">    Name =&gt; Field::new_column(&lt;&gt;),</span><br><span class="line">    &lt;table: Name&gt;&quot;.&quot;&lt;column: Name&gt; =&gt; Field::new_column(column).with_table(table),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ResultTable = Name;</span><br><span class="line"></span><br></pre></td></tr></table></figure></details><p>这是一个简单<code>SELECT</code>语句的语法分析，从上往下看。</p><ul><li><code>Comma</code>模板用于处理被逗号分隔的不定长项</li><li><code>Name</code>是一个匹配自定义字段名称的符号</li><li><code>Field</code>分析了<code>*</code>，<code>column</code>，<code>table.column</code>这三种情况</li><li><code>Fields</code>分析<code>SELECT</code>的多个目标字段</li><li><code>Expr</code>是一个简单的<code>SELECT</code>语法构成</li></ul><p>这段代码的问题在于，<code>Expr</code>内部的<code>select</code>和<code>from</code>是固定关键词匹配，而<code>SQL</code>是一个关键词兼容大小写的语言，所以我们需要将其改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pub Expr: Expr = &#123;</span><br><span class="line">    r&quot;(?i)select&quot; &lt;fields: Fields&gt; r&quot;(?i)from&quot; &lt;result_table: ResultTable&gt; =&gt; Expr::Select(SelectNode&#123;</span><br><span class="line">        fields,</span><br><span class="line">        result_table,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过正则来匹配大小写的形式，看起来不错，但是编译却报错了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~/workspace/rust/yasp(refactor*) » cargo <span class="built_in">test</span></span><br><span class="line">   Compiling yasp v0.1.0 (/home/you06/workspace/rust/yasp)</span><br><span class="line">error: failed to run custom build <span class="built_in">command</span> <span class="keyword">for</span> `yasp v0.1.0 (/home/you06/workspace/rust/yasp)`</span><br><span class="line"></span><br><span class="line">Caused by:</span><br><span class="line">  process didn<span class="string">&#x27;t exit successfully: `/home/you06/workspace/rust/yasp/target/debug/build/yasp-01bf64e1e5e0f353/build-script-build` (exit code: 1)</span></span><br><span class="line"><span class="string">--- stdout</span></span><br><span class="line"><span class="string">processing file `/home/you06/workspace/rust/yasp/src/grammar.lalrpop`</span></span><br><span class="line"><span class="string">/home/you06/workspace/rust/yasp/src/grammar.lalrpop:46:15: 46:30 error: ambiguity detected between the terminal `r#&quot;[0-9a-zA-Z_]+&quot;#` and the terminal `r#&quot;(?i)from&quot;#`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">--- stderr</span></span><br><span class="line"><span class="string">  Name: CIStr = r&quot;[0-9a-zA-Z_]+&quot; =&gt; &lt;&gt;.into();</span></span><br></pre></td></tr></table></figure><p>报错的原因是<code>select</code>和<code>from</code>既能够满足我们所期望的<code>Expr</code>的语法，也能够满足<code>Field</code>的语法，所以<code>lalrpop</code>不知道它属于那一个符号。在<code>SQL</code>语言里，是不能够将例如<code>select</code>，<code>from</code>这种关键词作为表名和字段名来使用的。对于固定的字符串，<code>lalrpop</code>会将它置于比正则匹配更高的优先级，所以纯小写的<code>SQL</code>能够被解析，但如果有多个正则表达式，他们之前将无法区分优先级（也无法做优先级标注），这造成了直接解析的失败。</p>]]></content:encoded>
      
      
      
      
      <comments>https://blog.tongmu.me/2020/06/01/yasp-diary-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cherry Bot</title>
      <link>https://blog.tongmu.me/2020/04/23/cherry-bot/</link>
      <guid>https://blog.tongmu.me/2020/04/23/cherry-bot/</guid>
      <pubDate>Thu, 23 Apr 2020 19:12:29 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9587680/60788142-95abc100-a18e-11e9-9a42-fbf21a023449.jpg&quot; alt=&quot;bot logo&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;How-I-cames-from&quot;&gt;&lt;a href=&quot;#How-I-cames-from&quot; class=&quot;headerlink&quot; title=&quot;How I cames from&quot;&gt;&lt;/a&gt;How I cames from&lt;/h2&gt;&lt;p&gt;I will talk about this bot from my story. Things began from was July 2019, I joined PingCAP as an intern. Holy I was a noob of golang and knew nothing about rust that time. The best way learning a language is by practising, I started my first golang project named cherry-picker. As the name shows, this is a tool which helps PingCAP’s engineers cherry pick PRs from master branch to release branch. The project soon ran out of my expectation, we started in TiDB, then expanded to TiKV and PD. I noticed that this bot is such awesome, in the following months, the bot growed quickly, some features were deprecated and some were optimized. Nowadays, the bot is widely used in PingCAP, and we think it’s time to share the bot with you!&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://user-images.githubusercontent.com/9587680/60788142-95abc100-a18e-11e9-9a42-fbf21a023449.jpg" alt="bot logo"></p><h2 id="How-I-cames-from"><a href="#How-I-cames-from" class="headerlink" title="How I cames from"></a>How I cames from</h2><p>I will talk about this bot from my story. Things began from was July 2019, I joined PingCAP as an intern. Holy I was a noob of golang and knew nothing about rust that time. The best way learning a language is by practising, I started my first golang project named cherry-picker. As the name shows, this is a tool which helps PingCAP’s engineers cherry pick PRs from master branch to release branch. The project soon ran out of my expectation, we started in TiDB, then expanded to TiKV and PD. I noticed that this bot is such awesome, in the following months, the bot growed quickly, some features were deprecated and some were optimized. Nowadays, the bot is widely used in PingCAP, and we think it’s time to share the bot with you!</p><span id="more"></span><h2 id="About-my-name"><a href="#About-my-name" class="headerlink" title="About my name"></a>About my name</h2><p>For a long time, I name the bot “cherry-picker”, because it’s the first feature of the bot. This time, I give it a new name, “Cherry Bot”, so the logo of bot will not change lol! By now, there are over 10 providers in this bot 🍻.</p><h2 id="The-mostly-used-features"><a href="#The-mostly-used-features" class="headerlink" title="The mostly used features"></a>The mostly used features</h2><h3 id="Cherry-Pick"><a href="#Cherry-Pick" class="headerlink" title="Cherry Pick"></a>Cherry Pick</h3><p>Bug fix pull requests in repositories with multi branches like <code>release-xx</code> and <code>master</code> are usually required to be cherry picked to release branches, manually do this would be tedious. It would be worse if we forget cherry picking bug-fix pull requests. Then the bot comes, it cherry picks every merged PR with specific labels, like pull request labeled with <code>needs-cherry-pick-2.0</code> will be cherry picked to <code>release-2.0</code> branch. What about conflicts? The conflicts are common between branches, the bot can be configured to generate conflicted pull requests either report a conflict failure. The conflict pull requests would be like the following which can be specified by IDEs.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">branch contents</span><br><span class="line">=======</span><br><span class="line">bug fix contents</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1234567890abcdef</span><br></pre></td></tr></table></figure><h3 id="Auto-Merge"><a href="#Auto-Merge" class="headerlink" title="Auto Merge"></a>Auto Merge</h3><p>If you are using some languages which have a heavy cost in compile or there are some tests that would last for a long time. After the reviewing of the pull request is finished, the CI may still running. Sometimes we would require the pull request tested with up to date changes. GitHub offers <code>Update Branch</code> to merge the latest changes from base branch, but after this action, the CI should be restarted. Think about this, a pull request is ready to merge and waiting for CI finished, then the base branch is updated, which makes a force update of this pull request and the CI restarts. A thousands years later, the CI is finally about to success, a pull request merged into the base branch again which makes the CI should restarted again. The same thing may be caused by you AFK while waiting for CI done. This makes pull requests under the state of competition, and the most of the CI’s job would be waste. The bot offer a mechanism to merge pull requests in a queue. When maitainers commented with <code>/merge</code>, the bot will labeled the pull request with <code>status/can merge</code> which stands for the pull request will be auto merged. If the pull request need to be waited for others, bot will comment with all the waited pull request numbers. This auto merge job can be canceled by remove the <code>status/can merge</code> label easily.</p><h3 id="Redeliver-Command"><a href="#Redeliver-Command" class="headerlink" title="Redeliver Command"></a>Redeliver Command</h3><p>PingCAP uses Jenkins for CI trigger and scheduler, some commands in Jenkins are only available for organization members. Besides, we also want some commands can be used by pull request owner, that’s why redeliver command comes. Comment with <code>@bot /run-integration-test</code>, then the bot will trigger this for you by comment with <code>/run-integration-test</code>. Do not try call <code>@bot /merge</code>, this would never work 😕.</p><h3 id="Auto-Update"><a href="#Auto-Update" class="headerlink" title="Auto Update"></a>Auto Update</h3><p>Some large project will have multiple repos. For example <code>TiKV</code> have the dependency <code>rust-rocksdb</code> and <code>rust-rocksdb</code> is based on <code>RocksDB</code> and <code>Titan</code>. This means any updates from <code>RocksDB</code> or <code>Titan</code> will need to be updated to <code>rust-rocksdb</code> then <code>TiKV</code>. We are always not to do this manually, that’s the bot’s time, give me the chore. The bot will auto file up a pull request to update the sub modules.</p><h3 id="More-Providers"><a href="#More-Providers" class="headerlink" title="More Providers"></a>More Providers</h3><p>There are still many providers I’ve not mentioned in this blog, check it out if you’re interested <a href="https://github.com/pingcap-incubator/cherry-bot/tree/master/pkg/providers">https://github.com/pingcap-incubator/cherry-bot/tree/master/pkg/providers</a>. For those features added into bot, I try to make them common instead of dedicated. And I’m expecting to get some feedbacks from community users.</p><h2 id="About-the-Code"><a href="#About-the-Code" class="headerlink" title="About the Code"></a>About the Code</h2><p>When I code this bot, I’m new to Golang. There are some unnacessary interfaces, redundant expressions and unsatisfied error handlings. I’ve made some efforts to make clean up the code, but it’s so so so a big work, it’s just like code the bot again 😭.</p><h2 id="Grumbles"><a href="#Grumbles" class="headerlink" title="Grumbles"></a>Grumbles</h2><p>I’ve written a lot of Golang code in the past year. This language is like a quad bike which makes everyone easy to drive. When use Golang in some projects, I often code many high repeatable expressions, like <code>if err != nil</code> which makes me feel pain. Also the feeling of controlling everything in CPP is missing. It’s not smart in both grammar and extreme performance. However, it’s still a preferred language for building some apps, where the performance is good enough and you don’t need to worry about whether memory is in stack or heap(I’m not sure whether it’s an advantage). Anyway, longtime writing Golang is tired, more features are always wanted like iterator, general types etc. The last complain, when doing some worthless jobs for fun, I’m very willing to try languages with more complexity. A further thinking, will you like a language which brings the ability of low level programming without knowledge of computer system?</p>]]></content:encoded>
      
      
      
      <category domain="https://blog.tongmu.me/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/">技术杂谈</category>
      
      <category domain="https://blog.tongmu.me/tags/English/">English</category>
      
      
      <comments>https://blog.tongmu.me/2020/04/23/cherry-bot/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>关于公众人物与普通人关系的想法</title>
      <link>https://blog.tongmu.me/2020/03/03/public-figure/</link>
      <guid>https://blog.tongmu.me/2020/03/03/public-figure/</guid>
      <pubDate>Tue, 03 Mar 2020 19:45:17 GMT</pubDate>
      
        
        
          
          
      <description>&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>「认真写完一条回复之后发现对方说做不到与回复交流这件事，于是为了不打扰又删掉了写完的内容，要传达到自己的意思好难啊。」</p><p>发完这条动态后，我跑去对方的个人主页，发现对方也是一样的不接受几乎所有的交流和评论。本身是我相当喜欢的一个创作者，所以有些受到打击的感觉，于是花了些时间来充值自己的信仰。在这过程中就想到了一些乱七八糟的东西，而我也仅敢将其称作「想法」，不敢提拔到「思考」的高度。</p><h2 id="公众人物"><a href="#公众人物" class="headerlink" title="公众人物"></a>公众人物</h2><p>首先谈一下我眼中的「公众人物」这个词，我对其没有什么特殊的研究，Wikipedia 的解释是「指具有一定社会地位、並在社会具有影响力与曝光度的人士」，当然我不能全部接受这个解释，需要补充一些细节。</p><ul><li>公众人物不一定需要具有社会地位</li><li>公众人物的一个必要条件是接触/被接触的人群是不确定的多数人</li><li>上一条中的「接触」并不能只是因为工作原因，比如服务业接触客户就不符合这个条件</li></ul><p>公众人物有着影响力与被影响力的特点，影响力很容易理解，指的是他说的话能够被很多人所听到；而被影响力指的是他能听到与他毫无关系的人所说的话，比如发了一条推，下面会出现以前从未见到过的人的评论。</p><p>公众人物范围广泛，而有的分类我既不了解，也不适合说，一下从几个方面说一说这一群体的局部特征。</p><p>⚠️：<strong>以下内容含有胡说八道，扭曲黑白等元素，拒绝观看自己所不认同的观点的话建议关掉这篇博客，我怕被喷</strong></p><h3 id="偶像"><a href="#偶像" class="headerlink" title="偶像"></a>偶像</h3><p>「偶像」是「公众人物」的毕业形态之一，是发展到最终阶段的成熟的、稳定的一个群体，并且与他的观众之间已经建立了稳定的关系。最近关于「观众」的话题很火，我不懂这其中的奥妙所以不拱火。我们来说稳定，这一稳定的概念在不同文化和观众下有着不同的体现和制约，比如偶像恋爱、结婚了，就会打破一些观众眼中的平衡。但是偶像能红五年以上的例子非常之多，所以我说这是一种稳定的毕业形态。至于其特点，我也不是非常有研究，但不妨瞎说一顿：</p><ul><li>偶像与观众之间的关系由代理人维护，所以极少能见到偶像会与观众直接互动的</li><li>偶像的形象被包装，观众所看到的人格并不一定是真实的</li></ul><p>以上两点，并非缺点，他是稳定的重要因素，理由大家应该都懂。</p><h3 id="网红"><a href="#网红" class="headerlink" title="网红"></a>网红</h3><p>与「偶像」不同，「网红」就没有那么稳定，我翻了翻脑袋，发现想不出几个五年前就红起来的网红（有可能是网红的出现较晚的原因）。与偶像不同，网红和观众的接触要更多更直接，比如职业主播，几乎每天都会面向观众说上好几个小时，在这种环境下，原本的形象变得更加容易传达到观众眼里，而包装，也就变得更加困难。直播必备弹幕，一个网红直播，也一定要和弹幕互动，在这其中，也就没有了代理人插足的空间。</p><h3 id="创作者"><a href="#创作者" class="headerlink" title="创作者"></a>创作者</h3><p>好了终于到了我真的想要说的事，前言所展示的动态，就是我和一个创作者之间发生的事情，虽然对方毫无感觉，但我的确是受到了不小的影响。和前两个群体不同的是，这一个群体更多的吸引人的地方，在于其作品产出，并非人格本身，他可能相貌平平，可能生活习惯恶劣，可能拖稿严重，但是只要作品赢得了观众的青睐，他和观众之间的桥梁就建立起来了。我把创作者与观众之间的关系同样划分位「公众人物」的稳定的毕业形态之一，附加的一点是，创作者同样可以选择不成为「公众人物」。</p><p>在发了前言的动态之后，我进入了那位创作者的个人主页，个人介绍里写着不接受约稿、转发等规则。当然这不是什么大问题，创作者不需要维护一个人见人爱的个人形象，所以可以尽情的发挥自己任性的想法。然而我当时是比较震惊的，为了让自己接受这一点并且继续喜欢对方的作品，花了很长的时间以及写了这篇博客来调整自己的心态。</p><p>首先说一下我个人的吐槽，评论了却得不到回复是很正常的事，但是得到回复却是非常开心的事，能够理解不想与人交流的心态，但也会为此感到伤心。个人介绍里完全可以写一些更加有趣的东西，为什么要直接将我推开呢？前面这个观点是很自私的，因为我不知道对方的实情。</p><p>其实此前我也看到过对方在推上说自己害怕社交，所以上述个人吐槽其实非常失礼，但这也的确是我本人的心态变化，所以记录下来。</p><p>观众会想象公众人物是他们心目中的样子，作为创作者也不例外会时常的受到这种期待，但这是不合理的，只是因为他们的工作成果被大家所享受，就对其提出公众人物的要求的话，是自身欲望的过度扩张。所谓创作者，只不过是全心全力的创作自己的作品而已，他们甚至都可以不将其发表，为什么一定要背负「公众人物」的期待呢？</p><p>想通了这些事情之后，我订阅了对方的 pixiv fanbox~ Good night 🌙</p>]]></content:encoded>
      
      
      
      <category domain="https://blog.tongmu.me/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>https://blog.tongmu.me/2020/03/03/public-figure/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
